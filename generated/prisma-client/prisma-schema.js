module.exports = {
  typeDefs: // Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

  /* GraphQL */ `type AggregateCase {
  count: Int!
}

type AggregateContact {
  count: Int!
}

type AggregateImportantDate {
  count: Int!
}

type AggregateNote {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Case {
  id: ID!
  caseId: String!
  title: String
  status: String
  referralType: String
  legalPlan: String
  importantDates(where: ImportantDateWhereInput, orderBy: ImportantDateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImportantDate!]
  caseNumberDetails: String
  generalCaseDetails: String
  caseContacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  client: Contact
  staffAttorneys(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  staffAssistants(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  opposingPartys(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  opposingAttorneys(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  referringPartys(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  associatedContacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  caseNotes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
}

type CaseConnection {
  pageInfo: PageInfo!
  edges: [CaseEdge]!
  aggregate: AggregateCase!
}

input CaseCreateInput {
  id: ID
  caseId: String!
  title: String
  status: String
  referralType: String
  legalPlan: String
  importantDates: ImportantDateCreateManyInput
  caseNumberDetails: String
  generalCaseDetails: String
  caseContacts: ContactCreateManyInput
  client: ContactCreateOneInput
  staffAttorneys: ContactCreateManyInput
  staffAssistants: ContactCreateManyInput
  opposingPartys: ContactCreateManyInput
  opposingAttorneys: ContactCreateManyInput
  referringPartys: ContactCreateManyInput
  associatedContacts: ContactCreateManyInput
  caseNotes: NoteCreateManyInput
}

type CaseEdge {
  node: Case!
  cursor: String!
}

enum CaseOrderByInput {
  id_ASC
  id_DESC
  caseId_ASC
  caseId_DESC
  title_ASC
  title_DESC
  status_ASC
  status_DESC
  referralType_ASC
  referralType_DESC
  legalPlan_ASC
  legalPlan_DESC
  caseNumberDetails_ASC
  caseNumberDetails_DESC
  generalCaseDetails_ASC
  generalCaseDetails_DESC
}

type CasePreviousValues {
  id: ID!
  caseId: String!
  title: String
  status: String
  referralType: String
  legalPlan: String
  caseNumberDetails: String
  generalCaseDetails: String
}

type CaseSubscriptionPayload {
  mutation: MutationType!
  node: Case
  updatedFields: [String!]
  previousValues: CasePreviousValues
}

input CaseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CaseWhereInput
  AND: [CaseSubscriptionWhereInput!]
  OR: [CaseSubscriptionWhereInput!]
  NOT: [CaseSubscriptionWhereInput!]
}

input CaseUpdateInput {
  caseId: String
  title: String
  status: String
  referralType: String
  legalPlan: String
  importantDates: ImportantDateUpdateManyInput
  caseNumberDetails: String
  generalCaseDetails: String
  caseContacts: ContactUpdateManyInput
  client: ContactUpdateOneInput
  staffAttorneys: ContactUpdateManyInput
  staffAssistants: ContactUpdateManyInput
  opposingPartys: ContactUpdateManyInput
  opposingAttorneys: ContactUpdateManyInput
  referringPartys: ContactUpdateManyInput
  associatedContacts: ContactUpdateManyInput
  caseNotes: NoteUpdateManyInput
}

input CaseUpdateManyMutationInput {
  caseId: String
  title: String
  status: String
  referralType: String
  legalPlan: String
  caseNumberDetails: String
  generalCaseDetails: String
}

input CaseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  caseId: String
  caseId_not: String
  caseId_in: [String!]
  caseId_not_in: [String!]
  caseId_lt: String
  caseId_lte: String
  caseId_gt: String
  caseId_gte: String
  caseId_contains: String
  caseId_not_contains: String
  caseId_starts_with: String
  caseId_not_starts_with: String
  caseId_ends_with: String
  caseId_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  referralType: String
  referralType_not: String
  referralType_in: [String!]
  referralType_not_in: [String!]
  referralType_lt: String
  referralType_lte: String
  referralType_gt: String
  referralType_gte: String
  referralType_contains: String
  referralType_not_contains: String
  referralType_starts_with: String
  referralType_not_starts_with: String
  referralType_ends_with: String
  referralType_not_ends_with: String
  legalPlan: String
  legalPlan_not: String
  legalPlan_in: [String!]
  legalPlan_not_in: [String!]
  legalPlan_lt: String
  legalPlan_lte: String
  legalPlan_gt: String
  legalPlan_gte: String
  legalPlan_contains: String
  legalPlan_not_contains: String
  legalPlan_starts_with: String
  legalPlan_not_starts_with: String
  legalPlan_ends_with: String
  legalPlan_not_ends_with: String
  importantDates_every: ImportantDateWhereInput
  importantDates_some: ImportantDateWhereInput
  importantDates_none: ImportantDateWhereInput
  caseNumberDetails: String
  caseNumberDetails_not: String
  caseNumberDetails_in: [String!]
  caseNumberDetails_not_in: [String!]
  caseNumberDetails_lt: String
  caseNumberDetails_lte: String
  caseNumberDetails_gt: String
  caseNumberDetails_gte: String
  caseNumberDetails_contains: String
  caseNumberDetails_not_contains: String
  caseNumberDetails_starts_with: String
  caseNumberDetails_not_starts_with: String
  caseNumberDetails_ends_with: String
  caseNumberDetails_not_ends_with: String
  generalCaseDetails: String
  generalCaseDetails_not: String
  generalCaseDetails_in: [String!]
  generalCaseDetails_not_in: [String!]
  generalCaseDetails_lt: String
  generalCaseDetails_lte: String
  generalCaseDetails_gt: String
  generalCaseDetails_gte: String
  generalCaseDetails_contains: String
  generalCaseDetails_not_contains: String
  generalCaseDetails_starts_with: String
  generalCaseDetails_not_starts_with: String
  generalCaseDetails_ends_with: String
  generalCaseDetails_not_ends_with: String
  caseContacts_every: ContactWhereInput
  caseContacts_some: ContactWhereInput
  caseContacts_none: ContactWhereInput
  client: ContactWhereInput
  staffAttorneys_every: ContactWhereInput
  staffAttorneys_some: ContactWhereInput
  staffAttorneys_none: ContactWhereInput
  staffAssistants_every: ContactWhereInput
  staffAssistants_some: ContactWhereInput
  staffAssistants_none: ContactWhereInput
  opposingPartys_every: ContactWhereInput
  opposingPartys_some: ContactWhereInput
  opposingPartys_none: ContactWhereInput
  opposingAttorneys_every: ContactWhereInput
  opposingAttorneys_some: ContactWhereInput
  opposingAttorneys_none: ContactWhereInput
  referringPartys_every: ContactWhereInput
  referringPartys_some: ContactWhereInput
  referringPartys_none: ContactWhereInput
  associatedContacts_every: ContactWhereInput
  associatedContacts_some: ContactWhereInput
  associatedContacts_none: ContactWhereInput
  caseNotes_every: NoteWhereInput
  caseNotes_some: NoteWhereInput
  caseNotes_none: NoteWhereInput
  AND: [CaseWhereInput!]
  OR: [CaseWhereInput!]
  NOT: [CaseWhereInput!]
}

input CaseWhereUniqueInput {
  id: ID
}

type Contact {
  id: ID!
  contactType: String
  firstName: String!
  lastName: String!
  homeStreet: String
  homeStreet2: String
  homeCity: String
  homeState: String
  homeZip: String
  workStreet: String
  workStreet2: String
  emailMain: String
  emailBackup: String
  socialSecurity: Float
  cellPhone: Float
  workPhone: Float
  homePhone: Float
  fax: Float
  contactComment: String
}

type ContactConnection {
  pageInfo: PageInfo!
  edges: [ContactEdge]!
  aggregate: AggregateContact!
}

input ContactCreateInput {
  id: ID
  contactType: String
  firstName: String!
  lastName: String!
  homeStreet: String
  homeStreet2: String
  homeCity: String
  homeState: String
  homeZip: String
  workStreet: String
  workStreet2: String
  emailMain: String
  emailBackup: String
  socialSecurity: Float
  cellPhone: Float
  workPhone: Float
  homePhone: Float
  fax: Float
  contactComment: String
}

input ContactCreateManyInput {
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

input ContactCreateOneInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
}

type ContactEdge {
  node: Contact!
  cursor: String!
}

enum ContactOrderByInput {
  id_ASC
  id_DESC
  contactType_ASC
  contactType_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  homeStreet_ASC
  homeStreet_DESC
  homeStreet2_ASC
  homeStreet2_DESC
  homeCity_ASC
  homeCity_DESC
  homeState_ASC
  homeState_DESC
  homeZip_ASC
  homeZip_DESC
  workStreet_ASC
  workStreet_DESC
  workStreet2_ASC
  workStreet2_DESC
  emailMain_ASC
  emailMain_DESC
  emailBackup_ASC
  emailBackup_DESC
  socialSecurity_ASC
  socialSecurity_DESC
  cellPhone_ASC
  cellPhone_DESC
  workPhone_ASC
  workPhone_DESC
  homePhone_ASC
  homePhone_DESC
  fax_ASC
  fax_DESC
  contactComment_ASC
  contactComment_DESC
}

type ContactPreviousValues {
  id: ID!
  contactType: String
  firstName: String!
  lastName: String!
  homeStreet: String
  homeStreet2: String
  homeCity: String
  homeState: String
  homeZip: String
  workStreet: String
  workStreet2: String
  emailMain: String
  emailBackup: String
  socialSecurity: Float
  cellPhone: Float
  workPhone: Float
  homePhone: Float
  fax: Float
  contactComment: String
}

input ContactScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  contactType: String
  contactType_not: String
  contactType_in: [String!]
  contactType_not_in: [String!]
  contactType_lt: String
  contactType_lte: String
  contactType_gt: String
  contactType_gte: String
  contactType_contains: String
  contactType_not_contains: String
  contactType_starts_with: String
  contactType_not_starts_with: String
  contactType_ends_with: String
  contactType_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  homeStreet: String
  homeStreet_not: String
  homeStreet_in: [String!]
  homeStreet_not_in: [String!]
  homeStreet_lt: String
  homeStreet_lte: String
  homeStreet_gt: String
  homeStreet_gte: String
  homeStreet_contains: String
  homeStreet_not_contains: String
  homeStreet_starts_with: String
  homeStreet_not_starts_with: String
  homeStreet_ends_with: String
  homeStreet_not_ends_with: String
  homeStreet2: String
  homeStreet2_not: String
  homeStreet2_in: [String!]
  homeStreet2_not_in: [String!]
  homeStreet2_lt: String
  homeStreet2_lte: String
  homeStreet2_gt: String
  homeStreet2_gte: String
  homeStreet2_contains: String
  homeStreet2_not_contains: String
  homeStreet2_starts_with: String
  homeStreet2_not_starts_with: String
  homeStreet2_ends_with: String
  homeStreet2_not_ends_with: String
  homeCity: String
  homeCity_not: String
  homeCity_in: [String!]
  homeCity_not_in: [String!]
  homeCity_lt: String
  homeCity_lte: String
  homeCity_gt: String
  homeCity_gte: String
  homeCity_contains: String
  homeCity_not_contains: String
  homeCity_starts_with: String
  homeCity_not_starts_with: String
  homeCity_ends_with: String
  homeCity_not_ends_with: String
  homeState: String
  homeState_not: String
  homeState_in: [String!]
  homeState_not_in: [String!]
  homeState_lt: String
  homeState_lte: String
  homeState_gt: String
  homeState_gte: String
  homeState_contains: String
  homeState_not_contains: String
  homeState_starts_with: String
  homeState_not_starts_with: String
  homeState_ends_with: String
  homeState_not_ends_with: String
  homeZip: String
  homeZip_not: String
  homeZip_in: [String!]
  homeZip_not_in: [String!]
  homeZip_lt: String
  homeZip_lte: String
  homeZip_gt: String
  homeZip_gte: String
  homeZip_contains: String
  homeZip_not_contains: String
  homeZip_starts_with: String
  homeZip_not_starts_with: String
  homeZip_ends_with: String
  homeZip_not_ends_with: String
  workStreet: String
  workStreet_not: String
  workStreet_in: [String!]
  workStreet_not_in: [String!]
  workStreet_lt: String
  workStreet_lte: String
  workStreet_gt: String
  workStreet_gte: String
  workStreet_contains: String
  workStreet_not_contains: String
  workStreet_starts_with: String
  workStreet_not_starts_with: String
  workStreet_ends_with: String
  workStreet_not_ends_with: String
  workStreet2: String
  workStreet2_not: String
  workStreet2_in: [String!]
  workStreet2_not_in: [String!]
  workStreet2_lt: String
  workStreet2_lte: String
  workStreet2_gt: String
  workStreet2_gte: String
  workStreet2_contains: String
  workStreet2_not_contains: String
  workStreet2_starts_with: String
  workStreet2_not_starts_with: String
  workStreet2_ends_with: String
  workStreet2_not_ends_with: String
  emailMain: String
  emailMain_not: String
  emailMain_in: [String!]
  emailMain_not_in: [String!]
  emailMain_lt: String
  emailMain_lte: String
  emailMain_gt: String
  emailMain_gte: String
  emailMain_contains: String
  emailMain_not_contains: String
  emailMain_starts_with: String
  emailMain_not_starts_with: String
  emailMain_ends_with: String
  emailMain_not_ends_with: String
  emailBackup: String
  emailBackup_not: String
  emailBackup_in: [String!]
  emailBackup_not_in: [String!]
  emailBackup_lt: String
  emailBackup_lte: String
  emailBackup_gt: String
  emailBackup_gte: String
  emailBackup_contains: String
  emailBackup_not_contains: String
  emailBackup_starts_with: String
  emailBackup_not_starts_with: String
  emailBackup_ends_with: String
  emailBackup_not_ends_with: String
  socialSecurity: Float
  socialSecurity_not: Float
  socialSecurity_in: [Float!]
  socialSecurity_not_in: [Float!]
  socialSecurity_lt: Float
  socialSecurity_lte: Float
  socialSecurity_gt: Float
  socialSecurity_gte: Float
  cellPhone: Float
  cellPhone_not: Float
  cellPhone_in: [Float!]
  cellPhone_not_in: [Float!]
  cellPhone_lt: Float
  cellPhone_lte: Float
  cellPhone_gt: Float
  cellPhone_gte: Float
  workPhone: Float
  workPhone_not: Float
  workPhone_in: [Float!]
  workPhone_not_in: [Float!]
  workPhone_lt: Float
  workPhone_lte: Float
  workPhone_gt: Float
  workPhone_gte: Float
  homePhone: Float
  homePhone_not: Float
  homePhone_in: [Float!]
  homePhone_not_in: [Float!]
  homePhone_lt: Float
  homePhone_lte: Float
  homePhone_gt: Float
  homePhone_gte: Float
  fax: Float
  fax_not: Float
  fax_in: [Float!]
  fax_not_in: [Float!]
  fax_lt: Float
  fax_lte: Float
  fax_gt: Float
  fax_gte: Float
  contactComment: String
  contactComment_not: String
  contactComment_in: [String!]
  contactComment_not_in: [String!]
  contactComment_lt: String
  contactComment_lte: String
  contactComment_gt: String
  contactComment_gte: String
  contactComment_contains: String
  contactComment_not_contains: String
  contactComment_starts_with: String
  contactComment_not_starts_with: String
  contactComment_ends_with: String
  contactComment_not_ends_with: String
  AND: [ContactScalarWhereInput!]
  OR: [ContactScalarWhereInput!]
  NOT: [ContactScalarWhereInput!]
}

type ContactSubscriptionPayload {
  mutation: MutationType!
  node: Contact
  updatedFields: [String!]
  previousValues: ContactPreviousValues
}

input ContactSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactWhereInput
  AND: [ContactSubscriptionWhereInput!]
  OR: [ContactSubscriptionWhereInput!]
  NOT: [ContactSubscriptionWhereInput!]
}

input ContactUpdateDataInput {
  contactType: String
  firstName: String
  lastName: String
  homeStreet: String
  homeStreet2: String
  homeCity: String
  homeState: String
  homeZip: String
  workStreet: String
  workStreet2: String
  emailMain: String
  emailBackup: String
  socialSecurity: Float
  cellPhone: Float
  workPhone: Float
  homePhone: Float
  fax: Float
  contactComment: String
}

input ContactUpdateInput {
  contactType: String
  firstName: String
  lastName: String
  homeStreet: String
  homeStreet2: String
  homeCity: String
  homeState: String
  homeZip: String
  workStreet: String
  workStreet2: String
  emailMain: String
  emailBackup: String
  socialSecurity: Float
  cellPhone: Float
  workPhone: Float
  homePhone: Float
  fax: Float
  contactComment: String
}

input ContactUpdateManyDataInput {
  contactType: String
  firstName: String
  lastName: String
  homeStreet: String
  homeStreet2: String
  homeCity: String
  homeState: String
  homeZip: String
  workStreet: String
  workStreet2: String
  emailMain: String
  emailBackup: String
  socialSecurity: Float
  cellPhone: Float
  workPhone: Float
  homePhone: Float
  fax: Float
  contactComment: String
}

input ContactUpdateManyInput {
  create: [ContactCreateInput!]
  update: [ContactUpdateWithWhereUniqueNestedInput!]
  upsert: [ContactUpsertWithWhereUniqueNestedInput!]
  delete: [ContactWhereUniqueInput!]
  connect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  disconnect: [ContactWhereUniqueInput!]
  deleteMany: [ContactScalarWhereInput!]
  updateMany: [ContactUpdateManyWithWhereNestedInput!]
}

input ContactUpdateManyMutationInput {
  contactType: String
  firstName: String
  lastName: String
  homeStreet: String
  homeStreet2: String
  homeCity: String
  homeState: String
  homeZip: String
  workStreet: String
  workStreet2: String
  emailMain: String
  emailBackup: String
  socialSecurity: Float
  cellPhone: Float
  workPhone: Float
  homePhone: Float
  fax: Float
  contactComment: String
}

input ContactUpdateManyWithWhereNestedInput {
  where: ContactScalarWhereInput!
  data: ContactUpdateManyDataInput!
}

input ContactUpdateOneInput {
  create: ContactCreateInput
  update: ContactUpdateDataInput
  upsert: ContactUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ContactWhereUniqueInput
}

input ContactUpdateWithWhereUniqueNestedInput {
  where: ContactWhereUniqueInput!
  data: ContactUpdateDataInput!
}

input ContactUpsertNestedInput {
  update: ContactUpdateDataInput!
  create: ContactCreateInput!
}

input ContactUpsertWithWhereUniqueNestedInput {
  where: ContactWhereUniqueInput!
  update: ContactUpdateDataInput!
  create: ContactCreateInput!
}

input ContactWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  contactType: String
  contactType_not: String
  contactType_in: [String!]
  contactType_not_in: [String!]
  contactType_lt: String
  contactType_lte: String
  contactType_gt: String
  contactType_gte: String
  contactType_contains: String
  contactType_not_contains: String
  contactType_starts_with: String
  contactType_not_starts_with: String
  contactType_ends_with: String
  contactType_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  homeStreet: String
  homeStreet_not: String
  homeStreet_in: [String!]
  homeStreet_not_in: [String!]
  homeStreet_lt: String
  homeStreet_lte: String
  homeStreet_gt: String
  homeStreet_gte: String
  homeStreet_contains: String
  homeStreet_not_contains: String
  homeStreet_starts_with: String
  homeStreet_not_starts_with: String
  homeStreet_ends_with: String
  homeStreet_not_ends_with: String
  homeStreet2: String
  homeStreet2_not: String
  homeStreet2_in: [String!]
  homeStreet2_not_in: [String!]
  homeStreet2_lt: String
  homeStreet2_lte: String
  homeStreet2_gt: String
  homeStreet2_gte: String
  homeStreet2_contains: String
  homeStreet2_not_contains: String
  homeStreet2_starts_with: String
  homeStreet2_not_starts_with: String
  homeStreet2_ends_with: String
  homeStreet2_not_ends_with: String
  homeCity: String
  homeCity_not: String
  homeCity_in: [String!]
  homeCity_not_in: [String!]
  homeCity_lt: String
  homeCity_lte: String
  homeCity_gt: String
  homeCity_gte: String
  homeCity_contains: String
  homeCity_not_contains: String
  homeCity_starts_with: String
  homeCity_not_starts_with: String
  homeCity_ends_with: String
  homeCity_not_ends_with: String
  homeState: String
  homeState_not: String
  homeState_in: [String!]
  homeState_not_in: [String!]
  homeState_lt: String
  homeState_lte: String
  homeState_gt: String
  homeState_gte: String
  homeState_contains: String
  homeState_not_contains: String
  homeState_starts_with: String
  homeState_not_starts_with: String
  homeState_ends_with: String
  homeState_not_ends_with: String
  homeZip: String
  homeZip_not: String
  homeZip_in: [String!]
  homeZip_not_in: [String!]
  homeZip_lt: String
  homeZip_lte: String
  homeZip_gt: String
  homeZip_gte: String
  homeZip_contains: String
  homeZip_not_contains: String
  homeZip_starts_with: String
  homeZip_not_starts_with: String
  homeZip_ends_with: String
  homeZip_not_ends_with: String
  workStreet: String
  workStreet_not: String
  workStreet_in: [String!]
  workStreet_not_in: [String!]
  workStreet_lt: String
  workStreet_lte: String
  workStreet_gt: String
  workStreet_gte: String
  workStreet_contains: String
  workStreet_not_contains: String
  workStreet_starts_with: String
  workStreet_not_starts_with: String
  workStreet_ends_with: String
  workStreet_not_ends_with: String
  workStreet2: String
  workStreet2_not: String
  workStreet2_in: [String!]
  workStreet2_not_in: [String!]
  workStreet2_lt: String
  workStreet2_lte: String
  workStreet2_gt: String
  workStreet2_gte: String
  workStreet2_contains: String
  workStreet2_not_contains: String
  workStreet2_starts_with: String
  workStreet2_not_starts_with: String
  workStreet2_ends_with: String
  workStreet2_not_ends_with: String
  emailMain: String
  emailMain_not: String
  emailMain_in: [String!]
  emailMain_not_in: [String!]
  emailMain_lt: String
  emailMain_lte: String
  emailMain_gt: String
  emailMain_gte: String
  emailMain_contains: String
  emailMain_not_contains: String
  emailMain_starts_with: String
  emailMain_not_starts_with: String
  emailMain_ends_with: String
  emailMain_not_ends_with: String
  emailBackup: String
  emailBackup_not: String
  emailBackup_in: [String!]
  emailBackup_not_in: [String!]
  emailBackup_lt: String
  emailBackup_lte: String
  emailBackup_gt: String
  emailBackup_gte: String
  emailBackup_contains: String
  emailBackup_not_contains: String
  emailBackup_starts_with: String
  emailBackup_not_starts_with: String
  emailBackup_ends_with: String
  emailBackup_not_ends_with: String
  socialSecurity: Float
  socialSecurity_not: Float
  socialSecurity_in: [Float!]
  socialSecurity_not_in: [Float!]
  socialSecurity_lt: Float
  socialSecurity_lte: Float
  socialSecurity_gt: Float
  socialSecurity_gte: Float
  cellPhone: Float
  cellPhone_not: Float
  cellPhone_in: [Float!]
  cellPhone_not_in: [Float!]
  cellPhone_lt: Float
  cellPhone_lte: Float
  cellPhone_gt: Float
  cellPhone_gte: Float
  workPhone: Float
  workPhone_not: Float
  workPhone_in: [Float!]
  workPhone_not_in: [Float!]
  workPhone_lt: Float
  workPhone_lte: Float
  workPhone_gt: Float
  workPhone_gte: Float
  homePhone: Float
  homePhone_not: Float
  homePhone_in: [Float!]
  homePhone_not_in: [Float!]
  homePhone_lt: Float
  homePhone_lte: Float
  homePhone_gt: Float
  homePhone_gte: Float
  fax: Float
  fax_not: Float
  fax_in: [Float!]
  fax_not_in: [Float!]
  fax_lt: Float
  fax_lte: Float
  fax_gt: Float
  fax_gte: Float
  contactComment: String
  contactComment_not: String
  contactComment_in: [String!]
  contactComment_not_in: [String!]
  contactComment_lt: String
  contactComment_lte: String
  contactComment_gt: String
  contactComment_gte: String
  contactComment_contains: String
  contactComment_not_contains: String
  contactComment_starts_with: String
  contactComment_not_starts_with: String
  contactComment_ends_with: String
  contactComment_not_ends_with: String
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
}

input ContactWhereUniqueInput {
  id: ID
}

scalar DateTime

type ImportantDate {
  id: ID!
  importantDateType: String
  ImportantDateDetails: String
}

type ImportantDateConnection {
  pageInfo: PageInfo!
  edges: [ImportantDateEdge]!
  aggregate: AggregateImportantDate!
}

input ImportantDateCreateInput {
  id: ID
  importantDateType: String
  ImportantDateDetails: String
}

input ImportantDateCreateManyInput {
  create: [ImportantDateCreateInput!]
  connect: [ImportantDateWhereUniqueInput!]
}

type ImportantDateEdge {
  node: ImportantDate!
  cursor: String!
}

enum ImportantDateOrderByInput {
  id_ASC
  id_DESC
  importantDateType_ASC
  importantDateType_DESC
  ImportantDateDetails_ASC
  ImportantDateDetails_DESC
}

type ImportantDatePreviousValues {
  id: ID!
  importantDateType: String
  ImportantDateDetails: String
}

input ImportantDateScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  importantDateType: String
  importantDateType_not: String
  importantDateType_in: [String!]
  importantDateType_not_in: [String!]
  importantDateType_lt: String
  importantDateType_lte: String
  importantDateType_gt: String
  importantDateType_gte: String
  importantDateType_contains: String
  importantDateType_not_contains: String
  importantDateType_starts_with: String
  importantDateType_not_starts_with: String
  importantDateType_ends_with: String
  importantDateType_not_ends_with: String
  ImportantDateDetails: String
  ImportantDateDetails_not: String
  ImportantDateDetails_in: [String!]
  ImportantDateDetails_not_in: [String!]
  ImportantDateDetails_lt: String
  ImportantDateDetails_lte: String
  ImportantDateDetails_gt: String
  ImportantDateDetails_gte: String
  ImportantDateDetails_contains: String
  ImportantDateDetails_not_contains: String
  ImportantDateDetails_starts_with: String
  ImportantDateDetails_not_starts_with: String
  ImportantDateDetails_ends_with: String
  ImportantDateDetails_not_ends_with: String
  AND: [ImportantDateScalarWhereInput!]
  OR: [ImportantDateScalarWhereInput!]
  NOT: [ImportantDateScalarWhereInput!]
}

type ImportantDateSubscriptionPayload {
  mutation: MutationType!
  node: ImportantDate
  updatedFields: [String!]
  previousValues: ImportantDatePreviousValues
}

input ImportantDateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImportantDateWhereInput
  AND: [ImportantDateSubscriptionWhereInput!]
  OR: [ImportantDateSubscriptionWhereInput!]
  NOT: [ImportantDateSubscriptionWhereInput!]
}

input ImportantDateUpdateDataInput {
  importantDateType: String
  ImportantDateDetails: String
}

input ImportantDateUpdateInput {
  importantDateType: String
  ImportantDateDetails: String
}

input ImportantDateUpdateManyDataInput {
  importantDateType: String
  ImportantDateDetails: String
}

input ImportantDateUpdateManyInput {
  create: [ImportantDateCreateInput!]
  update: [ImportantDateUpdateWithWhereUniqueNestedInput!]
  upsert: [ImportantDateUpsertWithWhereUniqueNestedInput!]
  delete: [ImportantDateWhereUniqueInput!]
  connect: [ImportantDateWhereUniqueInput!]
  set: [ImportantDateWhereUniqueInput!]
  disconnect: [ImportantDateWhereUniqueInput!]
  deleteMany: [ImportantDateScalarWhereInput!]
  updateMany: [ImportantDateUpdateManyWithWhereNestedInput!]
}

input ImportantDateUpdateManyMutationInput {
  importantDateType: String
  ImportantDateDetails: String
}

input ImportantDateUpdateManyWithWhereNestedInput {
  where: ImportantDateScalarWhereInput!
  data: ImportantDateUpdateManyDataInput!
}

input ImportantDateUpdateWithWhereUniqueNestedInput {
  where: ImportantDateWhereUniqueInput!
  data: ImportantDateUpdateDataInput!
}

input ImportantDateUpsertWithWhereUniqueNestedInput {
  where: ImportantDateWhereUniqueInput!
  update: ImportantDateUpdateDataInput!
  create: ImportantDateCreateInput!
}

input ImportantDateWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  importantDateType: String
  importantDateType_not: String
  importantDateType_in: [String!]
  importantDateType_not_in: [String!]
  importantDateType_lt: String
  importantDateType_lte: String
  importantDateType_gt: String
  importantDateType_gte: String
  importantDateType_contains: String
  importantDateType_not_contains: String
  importantDateType_starts_with: String
  importantDateType_not_starts_with: String
  importantDateType_ends_with: String
  importantDateType_not_ends_with: String
  ImportantDateDetails: String
  ImportantDateDetails_not: String
  ImportantDateDetails_in: [String!]
  ImportantDateDetails_not_in: [String!]
  ImportantDateDetails_lt: String
  ImportantDateDetails_lte: String
  ImportantDateDetails_gt: String
  ImportantDateDetails_gte: String
  ImportantDateDetails_contains: String
  ImportantDateDetails_not_contains: String
  ImportantDateDetails_starts_with: String
  ImportantDateDetails_not_starts_with: String
  ImportantDateDetails_ends_with: String
  ImportantDateDetails_not_ends_with: String
  AND: [ImportantDateWhereInput!]
  OR: [ImportantDateWhereInput!]
  NOT: [ImportantDateWhereInput!]
}

input ImportantDateWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCase(data: CaseCreateInput!): Case!
  updateCase(data: CaseUpdateInput!, where: CaseWhereUniqueInput!): Case
  updateManyCases(data: CaseUpdateManyMutationInput!, where: CaseWhereInput): BatchPayload!
  upsertCase(where: CaseWhereUniqueInput!, create: CaseCreateInput!, update: CaseUpdateInput!): Case!
  deleteCase(where: CaseWhereUniqueInput!): Case
  deleteManyCases(where: CaseWhereInput): BatchPayload!
  createContact(data: ContactCreateInput!): Contact!
  updateContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact
  updateManyContacts(data: ContactUpdateManyMutationInput!, where: ContactWhereInput): BatchPayload!
  upsertContact(where: ContactWhereUniqueInput!, create: ContactCreateInput!, update: ContactUpdateInput!): Contact!
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteManyContacts(where: ContactWhereInput): BatchPayload!
  createImportantDate(data: ImportantDateCreateInput!): ImportantDate!
  updateImportantDate(data: ImportantDateUpdateInput!, where: ImportantDateWhereUniqueInput!): ImportantDate
  updateManyImportantDates(data: ImportantDateUpdateManyMutationInput!, where: ImportantDateWhereInput): BatchPayload!
  upsertImportantDate(where: ImportantDateWhereUniqueInput!, create: ImportantDateCreateInput!, update: ImportantDateUpdateInput!): ImportantDate!
  deleteImportantDate(where: ImportantDateWhereUniqueInput!): ImportantDate
  deleteManyImportantDates(where: ImportantDateWhereInput): BatchPayload!
  createNote(data: NoteCreateInput!): Note!
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateManyNotes(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): BatchPayload!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Note {
  id: ID!
  dateCreated: DateTime!
  title: String!
  content: String
  author: String
  type: String
}

type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  id: ID
  title: String!
  content: String
  author: String
  type: String
}

input NoteCreateManyInput {
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

type NoteEdge {
  node: Note!
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  dateCreated_ASC
  dateCreated_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  author_ASC
  author_DESC
  type_ASC
  type_DESC
}

type NotePreviousValues {
  id: ID!
  dateCreated: DateTime!
  title: String!
  content: String
  author: String
  type: String
}

input NoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  dateCreated: DateTime
  dateCreated_not: DateTime
  dateCreated_in: [DateTime!]
  dateCreated_not_in: [DateTime!]
  dateCreated_lt: DateTime
  dateCreated_lte: DateTime
  dateCreated_gt: DateTime
  dateCreated_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  AND: [NoteScalarWhereInput!]
  OR: [NoteScalarWhereInput!]
  NOT: [NoteScalarWhereInput!]
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
  AND: [NoteSubscriptionWhereInput!]
  OR: [NoteSubscriptionWhereInput!]
  NOT: [NoteSubscriptionWhereInput!]
}

input NoteUpdateDataInput {
  title: String
  content: String
  author: String
  type: String
}

input NoteUpdateInput {
  title: String
  content: String
  author: String
  type: String
}

input NoteUpdateManyDataInput {
  title: String
  content: String
  author: String
  type: String
}

input NoteUpdateManyInput {
  create: [NoteCreateInput!]
  update: [NoteUpdateWithWhereUniqueNestedInput!]
  upsert: [NoteUpsertWithWhereUniqueNestedInput!]
  delete: [NoteWhereUniqueInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  deleteMany: [NoteScalarWhereInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
}

input NoteUpdateManyMutationInput {
  title: String
  content: String
  author: String
  type: String
}

input NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyDataInput!
}

input NoteUpdateWithWhereUniqueNestedInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateDataInput!
}

input NoteUpsertWithWhereUniqueNestedInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateDataInput!
  create: NoteCreateInput!
}

input NoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  dateCreated: DateTime
  dateCreated_not: DateTime
  dateCreated_in: [DateTime!]
  dateCreated_not_in: [DateTime!]
  dateCreated_lt: DateTime
  dateCreated_lte: DateTime
  dateCreated_gt: DateTime
  dateCreated_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
}

input NoteWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  case(where: CaseWhereUniqueInput!): Case
  cases(where: CaseWhereInput, orderBy: CaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Case]!
  casesConnection(where: CaseWhereInput, orderBy: CaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CaseConnection!
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact]!
  contactsConnection(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactConnection!
  importantDate(where: ImportantDateWhereUniqueInput!): ImportantDate
  importantDates(where: ImportantDateWhereInput, orderBy: ImportantDateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImportantDate]!
  importantDatesConnection(where: ImportantDateWhereInput, orderBy: ImportantDateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImportantDateConnection!
  note(where: NoteWhereUniqueInput!): Note
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  case(where: CaseSubscriptionWhereInput): CaseSubscriptionPayload
  contact(where: ContactSubscriptionWhereInput): ContactSubscriptionPayload
  importantDate(where: ImportantDateSubscriptionWhereInput): ImportantDateSubscriptionPayload
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String
  userName: String!
  role: String
  contact: Contact
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String
  userName: String!
  role: String
  contact: ContactCreateOneInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  userName_ASC
  userName_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  userName: String!
  role: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  userName: String
  role: String
  contact: ContactUpdateOneInput
}

input UserUpdateManyMutationInput {
  email: String
  userName: String
  role: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  contact: ContactWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`,
};
    