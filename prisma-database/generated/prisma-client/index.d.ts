// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  case: (where?: CaseWhereInput) => Promise<boolean>;
  contact: (where?: ContactWhereInput) => Promise<boolean>;
  importantDate: (where?: ImportantDateWhereInput) => Promise<boolean>;
  note: (where?: NoteWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  case: (where: CaseWhereUniqueInput) => CaseNullablePromise;
  cases: (args?: {
    where?: CaseWhereInput;
    orderBy?: CaseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Case>;
  casesConnection: (args?: {
    where?: CaseWhereInput;
    orderBy?: CaseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CaseConnectionPromise;
  contact: (where: ContactWhereUniqueInput) => ContactNullablePromise;
  contacts: (args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Contact>;
  contactsConnection: (args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContactConnectionPromise;
  importantDate: (
    where: ImportantDateWhereUniqueInput
  ) => ImportantDateNullablePromise;
  importantDates: (args?: {
    where?: ImportantDateWhereInput;
    orderBy?: ImportantDateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ImportantDate>;
  importantDatesConnection: (args?: {
    where?: ImportantDateWhereInput;
    orderBy?: ImportantDateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ImportantDateConnectionPromise;
  note: (where: NoteWhereUniqueInput) => NoteNullablePromise;
  notes: (args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Note>;
  notesConnection: (args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NoteConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCase: (data: CaseCreateInput) => CasePromise;
  updateCase: (args: {
    data: CaseUpdateInput;
    where: CaseWhereUniqueInput;
  }) => CasePromise;
  updateManyCases: (args: {
    data: CaseUpdateManyMutationInput;
    where?: CaseWhereInput;
  }) => BatchPayloadPromise;
  upsertCase: (args: {
    where: CaseWhereUniqueInput;
    create: CaseCreateInput;
    update: CaseUpdateInput;
  }) => CasePromise;
  deleteCase: (where: CaseWhereUniqueInput) => CasePromise;
  deleteManyCases: (where?: CaseWhereInput) => BatchPayloadPromise;
  createContact: (data: ContactCreateInput) => ContactPromise;
  updateContact: (args: {
    data: ContactUpdateInput;
    where: ContactWhereUniqueInput;
  }) => ContactPromise;
  updateManyContacts: (args: {
    data: ContactUpdateManyMutationInput;
    where?: ContactWhereInput;
  }) => BatchPayloadPromise;
  upsertContact: (args: {
    where: ContactWhereUniqueInput;
    create: ContactCreateInput;
    update: ContactUpdateInput;
  }) => ContactPromise;
  deleteContact: (where: ContactWhereUniqueInput) => ContactPromise;
  deleteManyContacts: (where?: ContactWhereInput) => BatchPayloadPromise;
  createImportantDate: (data: ImportantDateCreateInput) => ImportantDatePromise;
  updateImportantDate: (args: {
    data: ImportantDateUpdateInput;
    where: ImportantDateWhereUniqueInput;
  }) => ImportantDatePromise;
  updateManyImportantDates: (args: {
    data: ImportantDateUpdateManyMutationInput;
    where?: ImportantDateWhereInput;
  }) => BatchPayloadPromise;
  upsertImportantDate: (args: {
    where: ImportantDateWhereUniqueInput;
    create: ImportantDateCreateInput;
    update: ImportantDateUpdateInput;
  }) => ImportantDatePromise;
  deleteImportantDate: (
    where: ImportantDateWhereUniqueInput
  ) => ImportantDatePromise;
  deleteManyImportantDates: (
    where?: ImportantDateWhereInput
  ) => BatchPayloadPromise;
  createNote: (data: NoteCreateInput) => NotePromise;
  updateNote: (args: {
    data: NoteUpdateInput;
    where: NoteWhereUniqueInput;
  }) => NotePromise;
  updateManyNotes: (args: {
    data: NoteUpdateManyMutationInput;
    where?: NoteWhereInput;
  }) => BatchPayloadPromise;
  upsertNote: (args: {
    where: NoteWhereUniqueInput;
    create: NoteCreateInput;
    update: NoteUpdateInput;
  }) => NotePromise;
  deleteNote: (where: NoteWhereUniqueInput) => NotePromise;
  deleteManyNotes: (where?: NoteWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  case: (
    where?: CaseSubscriptionWhereInput
  ) => CaseSubscriptionPayloadSubscription;
  contact: (
    where?: ContactSubscriptionWhereInput
  ) => ContactSubscriptionPayloadSubscription;
  importantDate: (
    where?: ImportantDateSubscriptionWhereInput
  ) => ImportantDateSubscriptionPayloadSubscription;
  note: (
    where?: NoteSubscriptionWhereInput
  ) => NoteSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ContactOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "contactType_ASC"
  | "contactType_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "homeStreet_ASC"
  | "homeStreet_DESC"
  | "homeStreet2_ASC"
  | "homeStreet2_DESC"
  | "homeCity_ASC"
  | "homeCity_DESC"
  | "homeState_ASC"
  | "homeState_DESC"
  | "homeZip_ASC"
  | "homeZip_DESC"
  | "workStreet_ASC"
  | "workStreet_DESC"
  | "workStreet2_ASC"
  | "workStreet2_DESC"
  | "emailMain_ASC"
  | "emailMain_DESC"
  | "emailBackup_ASC"
  | "emailBackup_DESC"
  | "socialSecurity_ASC"
  | "socialSecurity_DESC"
  | "cellPhone_ASC"
  | "cellPhone_DESC"
  | "workPhone_ASC"
  | "workPhone_DESC"
  | "homePhone_ASC"
  | "homePhone_DESC"
  | "fax_ASC"
  | "fax_DESC"
  | "contactComment_ASC"
  | "contactComment_DESC";

export type NoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateCreated_ASC"
  | "dateCreated_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "type_ASC"
  | "type_DESC";

export type ImportantDateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "importantDateType_ASC"
  | "importantDateType_DESC"
  | "ImportantDateDetails_ASC"
  | "ImportantDateDetails_DESC";

export type CaseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "caseId_ASC"
  | "caseId_DESC"
  | "title_ASC"
  | "title_DESC"
  | "status_ASC"
  | "status_DESC"
  | "referralType_ASC"
  | "referralType_DESC"
  | "legalPlan_ASC"
  | "legalPlan_DESC"
  | "caseNumberDetails_ASC"
  | "caseNumberDetails_DESC"
  | "generalCaseDetails_ASC"
  | "generalCaseDetails_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "userName_ASC"
  | "userName_DESC"
  | "role_ASC"
  | "role_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ImportantDateUpdateDataInput {
  importantDateType?: Maybe<String>;
  ImportantDateDetails?: Maybe<String>;
}

export type CaseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  caseId?: Maybe<String>;
}>;

export interface ImportantDateUpdateManyDataInput {
  importantDateType?: Maybe<String>;
  ImportantDateDetails?: Maybe<String>;
}

export interface ContactWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  contactType?: Maybe<String>;
  contactType_not?: Maybe<String>;
  contactType_in?: Maybe<String[] | String>;
  contactType_not_in?: Maybe<String[] | String>;
  contactType_lt?: Maybe<String>;
  contactType_lte?: Maybe<String>;
  contactType_gt?: Maybe<String>;
  contactType_gte?: Maybe<String>;
  contactType_contains?: Maybe<String>;
  contactType_not_contains?: Maybe<String>;
  contactType_starts_with?: Maybe<String>;
  contactType_not_starts_with?: Maybe<String>;
  contactType_ends_with?: Maybe<String>;
  contactType_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  homeStreet?: Maybe<String>;
  homeStreet_not?: Maybe<String>;
  homeStreet_in?: Maybe<String[] | String>;
  homeStreet_not_in?: Maybe<String[] | String>;
  homeStreet_lt?: Maybe<String>;
  homeStreet_lte?: Maybe<String>;
  homeStreet_gt?: Maybe<String>;
  homeStreet_gte?: Maybe<String>;
  homeStreet_contains?: Maybe<String>;
  homeStreet_not_contains?: Maybe<String>;
  homeStreet_starts_with?: Maybe<String>;
  homeStreet_not_starts_with?: Maybe<String>;
  homeStreet_ends_with?: Maybe<String>;
  homeStreet_not_ends_with?: Maybe<String>;
  homeStreet2?: Maybe<String>;
  homeStreet2_not?: Maybe<String>;
  homeStreet2_in?: Maybe<String[] | String>;
  homeStreet2_not_in?: Maybe<String[] | String>;
  homeStreet2_lt?: Maybe<String>;
  homeStreet2_lte?: Maybe<String>;
  homeStreet2_gt?: Maybe<String>;
  homeStreet2_gte?: Maybe<String>;
  homeStreet2_contains?: Maybe<String>;
  homeStreet2_not_contains?: Maybe<String>;
  homeStreet2_starts_with?: Maybe<String>;
  homeStreet2_not_starts_with?: Maybe<String>;
  homeStreet2_ends_with?: Maybe<String>;
  homeStreet2_not_ends_with?: Maybe<String>;
  homeCity?: Maybe<String>;
  homeCity_not?: Maybe<String>;
  homeCity_in?: Maybe<String[] | String>;
  homeCity_not_in?: Maybe<String[] | String>;
  homeCity_lt?: Maybe<String>;
  homeCity_lte?: Maybe<String>;
  homeCity_gt?: Maybe<String>;
  homeCity_gte?: Maybe<String>;
  homeCity_contains?: Maybe<String>;
  homeCity_not_contains?: Maybe<String>;
  homeCity_starts_with?: Maybe<String>;
  homeCity_not_starts_with?: Maybe<String>;
  homeCity_ends_with?: Maybe<String>;
  homeCity_not_ends_with?: Maybe<String>;
  homeState?: Maybe<String>;
  homeState_not?: Maybe<String>;
  homeState_in?: Maybe<String[] | String>;
  homeState_not_in?: Maybe<String[] | String>;
  homeState_lt?: Maybe<String>;
  homeState_lte?: Maybe<String>;
  homeState_gt?: Maybe<String>;
  homeState_gte?: Maybe<String>;
  homeState_contains?: Maybe<String>;
  homeState_not_contains?: Maybe<String>;
  homeState_starts_with?: Maybe<String>;
  homeState_not_starts_with?: Maybe<String>;
  homeState_ends_with?: Maybe<String>;
  homeState_not_ends_with?: Maybe<String>;
  homeZip?: Maybe<String>;
  homeZip_not?: Maybe<String>;
  homeZip_in?: Maybe<String[] | String>;
  homeZip_not_in?: Maybe<String[] | String>;
  homeZip_lt?: Maybe<String>;
  homeZip_lte?: Maybe<String>;
  homeZip_gt?: Maybe<String>;
  homeZip_gte?: Maybe<String>;
  homeZip_contains?: Maybe<String>;
  homeZip_not_contains?: Maybe<String>;
  homeZip_starts_with?: Maybe<String>;
  homeZip_not_starts_with?: Maybe<String>;
  homeZip_ends_with?: Maybe<String>;
  homeZip_not_ends_with?: Maybe<String>;
  workStreet?: Maybe<String>;
  workStreet_not?: Maybe<String>;
  workStreet_in?: Maybe<String[] | String>;
  workStreet_not_in?: Maybe<String[] | String>;
  workStreet_lt?: Maybe<String>;
  workStreet_lte?: Maybe<String>;
  workStreet_gt?: Maybe<String>;
  workStreet_gte?: Maybe<String>;
  workStreet_contains?: Maybe<String>;
  workStreet_not_contains?: Maybe<String>;
  workStreet_starts_with?: Maybe<String>;
  workStreet_not_starts_with?: Maybe<String>;
  workStreet_ends_with?: Maybe<String>;
  workStreet_not_ends_with?: Maybe<String>;
  workStreet2?: Maybe<String>;
  workStreet2_not?: Maybe<String>;
  workStreet2_in?: Maybe<String[] | String>;
  workStreet2_not_in?: Maybe<String[] | String>;
  workStreet2_lt?: Maybe<String>;
  workStreet2_lte?: Maybe<String>;
  workStreet2_gt?: Maybe<String>;
  workStreet2_gte?: Maybe<String>;
  workStreet2_contains?: Maybe<String>;
  workStreet2_not_contains?: Maybe<String>;
  workStreet2_starts_with?: Maybe<String>;
  workStreet2_not_starts_with?: Maybe<String>;
  workStreet2_ends_with?: Maybe<String>;
  workStreet2_not_ends_with?: Maybe<String>;
  emailMain?: Maybe<String>;
  emailMain_not?: Maybe<String>;
  emailMain_in?: Maybe<String[] | String>;
  emailMain_not_in?: Maybe<String[] | String>;
  emailMain_lt?: Maybe<String>;
  emailMain_lte?: Maybe<String>;
  emailMain_gt?: Maybe<String>;
  emailMain_gte?: Maybe<String>;
  emailMain_contains?: Maybe<String>;
  emailMain_not_contains?: Maybe<String>;
  emailMain_starts_with?: Maybe<String>;
  emailMain_not_starts_with?: Maybe<String>;
  emailMain_ends_with?: Maybe<String>;
  emailMain_not_ends_with?: Maybe<String>;
  emailBackup?: Maybe<String>;
  emailBackup_not?: Maybe<String>;
  emailBackup_in?: Maybe<String[] | String>;
  emailBackup_not_in?: Maybe<String[] | String>;
  emailBackup_lt?: Maybe<String>;
  emailBackup_lte?: Maybe<String>;
  emailBackup_gt?: Maybe<String>;
  emailBackup_gte?: Maybe<String>;
  emailBackup_contains?: Maybe<String>;
  emailBackup_not_contains?: Maybe<String>;
  emailBackup_starts_with?: Maybe<String>;
  emailBackup_not_starts_with?: Maybe<String>;
  emailBackup_ends_with?: Maybe<String>;
  emailBackup_not_ends_with?: Maybe<String>;
  socialSecurity?: Maybe<Float>;
  socialSecurity_not?: Maybe<Float>;
  socialSecurity_in?: Maybe<Float[] | Float>;
  socialSecurity_not_in?: Maybe<Float[] | Float>;
  socialSecurity_lt?: Maybe<Float>;
  socialSecurity_lte?: Maybe<Float>;
  socialSecurity_gt?: Maybe<Float>;
  socialSecurity_gte?: Maybe<Float>;
  cellPhone?: Maybe<Float>;
  cellPhone_not?: Maybe<Float>;
  cellPhone_in?: Maybe<Float[] | Float>;
  cellPhone_not_in?: Maybe<Float[] | Float>;
  cellPhone_lt?: Maybe<Float>;
  cellPhone_lte?: Maybe<Float>;
  cellPhone_gt?: Maybe<Float>;
  cellPhone_gte?: Maybe<Float>;
  workPhone?: Maybe<Float>;
  workPhone_not?: Maybe<Float>;
  workPhone_in?: Maybe<Float[] | Float>;
  workPhone_not_in?: Maybe<Float[] | Float>;
  workPhone_lt?: Maybe<Float>;
  workPhone_lte?: Maybe<Float>;
  workPhone_gt?: Maybe<Float>;
  workPhone_gte?: Maybe<Float>;
  homePhone?: Maybe<Float>;
  homePhone_not?: Maybe<Float>;
  homePhone_in?: Maybe<Float[] | Float>;
  homePhone_not_in?: Maybe<Float[] | Float>;
  homePhone_lt?: Maybe<Float>;
  homePhone_lte?: Maybe<Float>;
  homePhone_gt?: Maybe<Float>;
  homePhone_gte?: Maybe<Float>;
  fax?: Maybe<Float>;
  fax_not?: Maybe<Float>;
  fax_in?: Maybe<Float[] | Float>;
  fax_not_in?: Maybe<Float[] | Float>;
  fax_lt?: Maybe<Float>;
  fax_lte?: Maybe<Float>;
  fax_gt?: Maybe<Float>;
  fax_gte?: Maybe<Float>;
  contactComment?: Maybe<String>;
  contactComment_not?: Maybe<String>;
  contactComment_in?: Maybe<String[] | String>;
  contactComment_not_in?: Maybe<String[] | String>;
  contactComment_lt?: Maybe<String>;
  contactComment_lte?: Maybe<String>;
  contactComment_gt?: Maybe<String>;
  contactComment_gte?: Maybe<String>;
  contactComment_contains?: Maybe<String>;
  contactComment_not_contains?: Maybe<String>;
  contactComment_starts_with?: Maybe<String>;
  contactComment_not_starts_with?: Maybe<String>;
  contactComment_ends_with?: Maybe<String>;
  contactComment_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContactWhereInput[] | ContactWhereInput>;
  OR?: Maybe<ContactWhereInput[] | ContactWhereInput>;
  NOT?: Maybe<ContactWhereInput[] | ContactWhereInput>;
}

export interface CaseCreateInput {
  id?: Maybe<ID_Input>;
  caseId: String;
  title?: Maybe<String>;
  status?: Maybe<String>;
  referralType?: Maybe<String>;
  legalPlan?: Maybe<String>;
  importantDates?: Maybe<ImportantDateCreateManyInput>;
  caseNumberDetails?: Maybe<String>;
  generalCaseDetails?: Maybe<String>;
  caseContacts?: Maybe<ContactCreateManyInput>;
  client?: Maybe<ContactCreateOneInput>;
  staffAttorneys?: Maybe<ContactCreateManyInput>;
  staffAssistants?: Maybe<ContactCreateManyInput>;
  opposingPartys?: Maybe<ContactCreateManyInput>;
  opposingAttorneys?: Maybe<ContactCreateManyInput>;
  referringPartys?: Maybe<ContactCreateManyInput>;
  associatedContacts?: Maybe<ContactCreateManyInput>;
  caseNotes?: Maybe<NoteCreateManyWithoutCaseInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  userName?: Maybe<String>;
  role?: Maybe<String>;
  contact?: Maybe<ContactUpdateOneInput>;
}

export interface ImportantDateCreateManyInput {
  create?: Maybe<ImportantDateCreateInput[] | ImportantDateCreateInput>;
  connect?: Maybe<
    ImportantDateWhereUniqueInput[] | ImportantDateWhereUniqueInput
  >;
}

export interface ContactUpdateManyInput {
  create?: Maybe<ContactCreateInput[] | ContactCreateInput>;
  update?: Maybe<
    | ContactUpdateWithWhereUniqueNestedInput[]
    | ContactUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ContactUpsertWithWhereUniqueNestedInput[]
    | ContactUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ContactWhereUniqueInput[] | ContactWhereUniqueInput>;
  connect?: Maybe<ContactWhereUniqueInput[] | ContactWhereUniqueInput>;
  set?: Maybe<ContactWhereUniqueInput[] | ContactWhereUniqueInput>;
  disconnect?: Maybe<ContactWhereUniqueInput[] | ContactWhereUniqueInput>;
  deleteMany?: Maybe<ContactScalarWhereInput[] | ContactScalarWhereInput>;
  updateMany?: Maybe<
    | ContactUpdateManyWithWhereNestedInput[]
    | ContactUpdateManyWithWhereNestedInput
  >;
}

export interface ImportantDateCreateInput {
  id?: Maybe<ID_Input>;
  importantDateType?: Maybe<String>;
  ImportantDateDetails?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ContactCreateManyInput {
  create?: Maybe<ContactCreateInput[] | ContactCreateInput>;
  connect?: Maybe<ContactWhereUniqueInput[] | ContactWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  role?: Maybe<String>;
  role_not?: Maybe<String>;
  role_in?: Maybe<String[] | String>;
  role_not_in?: Maybe<String[] | String>;
  role_lt?: Maybe<String>;
  role_lte?: Maybe<String>;
  role_gt?: Maybe<String>;
  role_gte?: Maybe<String>;
  role_contains?: Maybe<String>;
  role_not_contains?: Maybe<String>;
  role_starts_with?: Maybe<String>;
  role_not_starts_with?: Maybe<String>;
  role_ends_with?: Maybe<String>;
  role_not_ends_with?: Maybe<String>;
  contact?: Maybe<ContactWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ContactCreateInput {
  id?: Maybe<ID_Input>;
  contactType?: Maybe<String>;
  firstName: String;
  lastName: String;
  homeStreet?: Maybe<String>;
  homeStreet2?: Maybe<String>;
  homeCity?: Maybe<String>;
  homeState?: Maybe<String>;
  homeZip?: Maybe<String>;
  workStreet?: Maybe<String>;
  workStreet2?: Maybe<String>;
  emailMain?: Maybe<String>;
  emailBackup?: Maybe<String>;
  socialSecurity?: Maybe<Float>;
  cellPhone?: Maybe<Float>;
  workPhone?: Maybe<Float>;
  homePhone?: Maybe<Float>;
  fax?: Maybe<Float>;
  contactComment?: Maybe<String>;
}

export interface ImportantDateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ImportantDateWhereInput>;
  AND?: Maybe<
    ImportantDateSubscriptionWhereInput[] | ImportantDateSubscriptionWhereInput
  >;
  OR?: Maybe<
    ImportantDateSubscriptionWhereInput[] | ImportantDateSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ImportantDateSubscriptionWhereInput[] | ImportantDateSubscriptionWhereInput
  >;
}

export interface ContactCreateOneInput {
  create?: Maybe<ContactCreateInput>;
  connect?: Maybe<ContactWhereUniqueInput>;
}

export interface ImportantDateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  importantDateType?: Maybe<String>;
  importantDateType_not?: Maybe<String>;
  importantDateType_in?: Maybe<String[] | String>;
  importantDateType_not_in?: Maybe<String[] | String>;
  importantDateType_lt?: Maybe<String>;
  importantDateType_lte?: Maybe<String>;
  importantDateType_gt?: Maybe<String>;
  importantDateType_gte?: Maybe<String>;
  importantDateType_contains?: Maybe<String>;
  importantDateType_not_contains?: Maybe<String>;
  importantDateType_starts_with?: Maybe<String>;
  importantDateType_not_starts_with?: Maybe<String>;
  importantDateType_ends_with?: Maybe<String>;
  importantDateType_not_ends_with?: Maybe<String>;
  ImportantDateDetails?: Maybe<String>;
  ImportantDateDetails_not?: Maybe<String>;
  ImportantDateDetails_in?: Maybe<String[] | String>;
  ImportantDateDetails_not_in?: Maybe<String[] | String>;
  ImportantDateDetails_lt?: Maybe<String>;
  ImportantDateDetails_lte?: Maybe<String>;
  ImportantDateDetails_gt?: Maybe<String>;
  ImportantDateDetails_gte?: Maybe<String>;
  ImportantDateDetails_contains?: Maybe<String>;
  ImportantDateDetails_not_contains?: Maybe<String>;
  ImportantDateDetails_starts_with?: Maybe<String>;
  ImportantDateDetails_not_starts_with?: Maybe<String>;
  ImportantDateDetails_ends_with?: Maybe<String>;
  ImportantDateDetails_not_ends_with?: Maybe<String>;
  AND?: Maybe<ImportantDateWhereInput[] | ImportantDateWhereInput>;
  OR?: Maybe<ImportantDateWhereInput[] | ImportantDateWhereInput>;
  NOT?: Maybe<ImportantDateWhereInput[] | ImportantDateWhereInput>;
}

export interface NoteCreateManyWithoutCaseInput {
  create?: Maybe<NoteCreateWithoutCaseInput[] | NoteCreateWithoutCaseInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  userName?: Maybe<String>;
  role?: Maybe<String>;
}

export interface NoteCreateWithoutCaseInput {
  id?: Maybe<ID_Input>;
  title: String;
  content?: Maybe<String>;
  author?: Maybe<UserCreateOneInput>;
  type?: Maybe<String>;
}

export interface NoteUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  type?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type ContactWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  userName: String;
  role?: Maybe<String>;
  contact?: Maybe<ContactCreateOneInput>;
}

export interface CaseUpdateOneWithoutCaseNotesInput {
  create?: Maybe<CaseCreateWithoutCaseNotesInput>;
  update?: Maybe<CaseUpdateWithoutCaseNotesDataInput>;
  upsert?: Maybe<CaseUpsertWithoutCaseNotesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CaseWhereUniqueInput>;
}

export interface CaseUpdateInput {
  caseId?: Maybe<String>;
  title?: Maybe<String>;
  status?: Maybe<String>;
  referralType?: Maybe<String>;
  legalPlan?: Maybe<String>;
  importantDates?: Maybe<ImportantDateUpdateManyInput>;
  caseNumberDetails?: Maybe<String>;
  generalCaseDetails?: Maybe<String>;
  caseContacts?: Maybe<ContactUpdateManyInput>;
  client?: Maybe<ContactUpdateOneInput>;
  staffAttorneys?: Maybe<ContactUpdateManyInput>;
  staffAssistants?: Maybe<ContactUpdateManyInput>;
  opposingPartys?: Maybe<ContactUpdateManyInput>;
  opposingAttorneys?: Maybe<ContactUpdateManyInput>;
  referringPartys?: Maybe<ContactUpdateManyInput>;
  associatedContacts?: Maybe<ContactUpdateManyInput>;
  caseNotes?: Maybe<NoteUpdateManyWithoutCaseInput>;
}

export type ImportantDateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ImportantDateUpdateManyInput {
  create?: Maybe<ImportantDateCreateInput[] | ImportantDateCreateInput>;
  update?: Maybe<
    | ImportantDateUpdateWithWhereUniqueNestedInput[]
    | ImportantDateUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ImportantDateUpsertWithWhereUniqueNestedInput[]
    | ImportantDateUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    ImportantDateWhereUniqueInput[] | ImportantDateWhereUniqueInput
  >;
  connect?: Maybe<
    ImportantDateWhereUniqueInput[] | ImportantDateWhereUniqueInput
  >;
  set?: Maybe<ImportantDateWhereUniqueInput[] | ImportantDateWhereUniqueInput>;
  disconnect?: Maybe<
    ImportantDateWhereUniqueInput[] | ImportantDateWhereUniqueInput
  >;
  deleteMany?: Maybe<
    ImportantDateScalarWhereInput[] | ImportantDateScalarWhereInput
  >;
  updateMany?: Maybe<
    | ImportantDateUpdateManyWithWhereNestedInput[]
    | ImportantDateUpdateManyWithWhereNestedInput
  >;
}

export interface CaseCreateOneWithoutCaseNotesInput {
  create?: Maybe<CaseCreateWithoutCaseNotesInput>;
  connect?: Maybe<CaseWhereUniqueInput>;
}

export interface ImportantDateUpdateWithWhereUniqueNestedInput {
  where: ImportantDateWhereUniqueInput;
  data: ImportantDateUpdateDataInput;
}

export type NoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  dateCreated?: Maybe<DateTimeInput>;
  dateCreated_not?: Maybe<DateTimeInput>;
  dateCreated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateCreated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateCreated_lt?: Maybe<DateTimeInput>;
  dateCreated_lte?: Maybe<DateTimeInput>;
  dateCreated_gt?: Maybe<DateTimeInput>;
  dateCreated_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  OR?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  NOT?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
}

export interface ImportantDateUpdateInput {
  importantDateType?: Maybe<String>;
  ImportantDateDetails?: Maybe<String>;
}

export interface ImportantDateUpsertWithWhereUniqueNestedInput {
  where: ImportantDateWhereUniqueInput;
  update: ImportantDateUpdateDataInput;
  create: ImportantDateCreateInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ImportantDateScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  importantDateType?: Maybe<String>;
  importantDateType_not?: Maybe<String>;
  importantDateType_in?: Maybe<String[] | String>;
  importantDateType_not_in?: Maybe<String[] | String>;
  importantDateType_lt?: Maybe<String>;
  importantDateType_lte?: Maybe<String>;
  importantDateType_gt?: Maybe<String>;
  importantDateType_gte?: Maybe<String>;
  importantDateType_contains?: Maybe<String>;
  importantDateType_not_contains?: Maybe<String>;
  importantDateType_starts_with?: Maybe<String>;
  importantDateType_not_starts_with?: Maybe<String>;
  importantDateType_ends_with?: Maybe<String>;
  importantDateType_not_ends_with?: Maybe<String>;
  ImportantDateDetails?: Maybe<String>;
  ImportantDateDetails_not?: Maybe<String>;
  ImportantDateDetails_in?: Maybe<String[] | String>;
  ImportantDateDetails_not_in?: Maybe<String[] | String>;
  ImportantDateDetails_lt?: Maybe<String>;
  ImportantDateDetails_lte?: Maybe<String>;
  ImportantDateDetails_gt?: Maybe<String>;
  ImportantDateDetails_gte?: Maybe<String>;
  ImportantDateDetails_contains?: Maybe<String>;
  ImportantDateDetails_not_contains?: Maybe<String>;
  ImportantDateDetails_starts_with?: Maybe<String>;
  ImportantDateDetails_not_starts_with?: Maybe<String>;
  ImportantDateDetails_ends_with?: Maybe<String>;
  ImportantDateDetails_not_ends_with?: Maybe<String>;
  AND?: Maybe<ImportantDateScalarWhereInput[] | ImportantDateScalarWhereInput>;
  OR?: Maybe<ImportantDateScalarWhereInput[] | ImportantDateScalarWhereInput>;
  NOT?: Maybe<ImportantDateScalarWhereInput[] | ImportantDateScalarWhereInput>;
}

export interface CaseUpdateManyMutationInput {
  caseId?: Maybe<String>;
  title?: Maybe<String>;
  status?: Maybe<String>;
  referralType?: Maybe<String>;
  legalPlan?: Maybe<String>;
  caseNumberDetails?: Maybe<String>;
  generalCaseDetails?: Maybe<String>;
}

export interface ImportantDateUpdateManyWithWhereNestedInput {
  where: ImportantDateScalarWhereInput;
  data: ImportantDateUpdateManyDataInput;
}

export interface NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput;
  data: NoteUpdateManyDataInput;
}

export interface NoteUpsertWithWhereUniqueWithoutCaseInput {
  where: NoteWhereUniqueInput;
  update: NoteUpdateWithoutCaseDataInput;
  create: NoteCreateWithoutCaseInput;
}

export interface NoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  dateCreated?: Maybe<DateTimeInput>;
  dateCreated_not?: Maybe<DateTimeInput>;
  dateCreated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateCreated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateCreated_lt?: Maybe<DateTimeInput>;
  dateCreated_lte?: Maybe<DateTimeInput>;
  dateCreated_gt?: Maybe<DateTimeInput>;
  dateCreated_gte?: Maybe<DateTimeInput>;
  case?: Maybe<CaseWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<NoteWhereInput[] | NoteWhereInput>;
  OR?: Maybe<NoteWhereInput[] | NoteWhereInput>;
  NOT?: Maybe<NoteWhereInput[] | NoteWhereInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface NoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NoteWhereInput>;
  AND?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
  OR?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
  NOT?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
}

export interface ContactUpdateWithWhereUniqueNestedInput {
  where: ContactWhereUniqueInput;
  data: ContactUpdateDataInput;
}

export interface CaseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CaseWhereInput>;
  AND?: Maybe<CaseSubscriptionWhereInput[] | CaseSubscriptionWhereInput>;
  OR?: Maybe<CaseSubscriptionWhereInput[] | CaseSubscriptionWhereInput>;
  NOT?: Maybe<CaseSubscriptionWhereInput[] | CaseSubscriptionWhereInput>;
}

export interface ContactUpdateDataInput {
  contactType?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeStreet?: Maybe<String>;
  homeStreet2?: Maybe<String>;
  homeCity?: Maybe<String>;
  homeState?: Maybe<String>;
  homeZip?: Maybe<String>;
  workStreet?: Maybe<String>;
  workStreet2?: Maybe<String>;
  emailMain?: Maybe<String>;
  emailBackup?: Maybe<String>;
  socialSecurity?: Maybe<Float>;
  cellPhone?: Maybe<Float>;
  workPhone?: Maybe<Float>;
  homePhone?: Maybe<Float>;
  fax?: Maybe<Float>;
  contactComment?: Maybe<String>;
}

export interface CaseUpsertWithoutCaseNotesInput {
  update: CaseUpdateWithoutCaseNotesDataInput;
  create: CaseCreateWithoutCaseNotesInput;
}

export interface ContactUpsertWithWhereUniqueNestedInput {
  where: ContactWhereUniqueInput;
  update: ContactUpdateDataInput;
  create: ContactCreateInput;
}

export interface NoteUpdateInput {
  case?: Maybe<CaseUpdateOneWithoutCaseNotesInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  author?: Maybe<UserUpdateOneInput>;
  type?: Maybe<String>;
}

export interface ContactScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  contactType?: Maybe<String>;
  contactType_not?: Maybe<String>;
  contactType_in?: Maybe<String[] | String>;
  contactType_not_in?: Maybe<String[] | String>;
  contactType_lt?: Maybe<String>;
  contactType_lte?: Maybe<String>;
  contactType_gt?: Maybe<String>;
  contactType_gte?: Maybe<String>;
  contactType_contains?: Maybe<String>;
  contactType_not_contains?: Maybe<String>;
  contactType_starts_with?: Maybe<String>;
  contactType_not_starts_with?: Maybe<String>;
  contactType_ends_with?: Maybe<String>;
  contactType_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  homeStreet?: Maybe<String>;
  homeStreet_not?: Maybe<String>;
  homeStreet_in?: Maybe<String[] | String>;
  homeStreet_not_in?: Maybe<String[] | String>;
  homeStreet_lt?: Maybe<String>;
  homeStreet_lte?: Maybe<String>;
  homeStreet_gt?: Maybe<String>;
  homeStreet_gte?: Maybe<String>;
  homeStreet_contains?: Maybe<String>;
  homeStreet_not_contains?: Maybe<String>;
  homeStreet_starts_with?: Maybe<String>;
  homeStreet_not_starts_with?: Maybe<String>;
  homeStreet_ends_with?: Maybe<String>;
  homeStreet_not_ends_with?: Maybe<String>;
  homeStreet2?: Maybe<String>;
  homeStreet2_not?: Maybe<String>;
  homeStreet2_in?: Maybe<String[] | String>;
  homeStreet2_not_in?: Maybe<String[] | String>;
  homeStreet2_lt?: Maybe<String>;
  homeStreet2_lte?: Maybe<String>;
  homeStreet2_gt?: Maybe<String>;
  homeStreet2_gte?: Maybe<String>;
  homeStreet2_contains?: Maybe<String>;
  homeStreet2_not_contains?: Maybe<String>;
  homeStreet2_starts_with?: Maybe<String>;
  homeStreet2_not_starts_with?: Maybe<String>;
  homeStreet2_ends_with?: Maybe<String>;
  homeStreet2_not_ends_with?: Maybe<String>;
  homeCity?: Maybe<String>;
  homeCity_not?: Maybe<String>;
  homeCity_in?: Maybe<String[] | String>;
  homeCity_not_in?: Maybe<String[] | String>;
  homeCity_lt?: Maybe<String>;
  homeCity_lte?: Maybe<String>;
  homeCity_gt?: Maybe<String>;
  homeCity_gte?: Maybe<String>;
  homeCity_contains?: Maybe<String>;
  homeCity_not_contains?: Maybe<String>;
  homeCity_starts_with?: Maybe<String>;
  homeCity_not_starts_with?: Maybe<String>;
  homeCity_ends_with?: Maybe<String>;
  homeCity_not_ends_with?: Maybe<String>;
  homeState?: Maybe<String>;
  homeState_not?: Maybe<String>;
  homeState_in?: Maybe<String[] | String>;
  homeState_not_in?: Maybe<String[] | String>;
  homeState_lt?: Maybe<String>;
  homeState_lte?: Maybe<String>;
  homeState_gt?: Maybe<String>;
  homeState_gte?: Maybe<String>;
  homeState_contains?: Maybe<String>;
  homeState_not_contains?: Maybe<String>;
  homeState_starts_with?: Maybe<String>;
  homeState_not_starts_with?: Maybe<String>;
  homeState_ends_with?: Maybe<String>;
  homeState_not_ends_with?: Maybe<String>;
  homeZip?: Maybe<String>;
  homeZip_not?: Maybe<String>;
  homeZip_in?: Maybe<String[] | String>;
  homeZip_not_in?: Maybe<String[] | String>;
  homeZip_lt?: Maybe<String>;
  homeZip_lte?: Maybe<String>;
  homeZip_gt?: Maybe<String>;
  homeZip_gte?: Maybe<String>;
  homeZip_contains?: Maybe<String>;
  homeZip_not_contains?: Maybe<String>;
  homeZip_starts_with?: Maybe<String>;
  homeZip_not_starts_with?: Maybe<String>;
  homeZip_ends_with?: Maybe<String>;
  homeZip_not_ends_with?: Maybe<String>;
  workStreet?: Maybe<String>;
  workStreet_not?: Maybe<String>;
  workStreet_in?: Maybe<String[] | String>;
  workStreet_not_in?: Maybe<String[] | String>;
  workStreet_lt?: Maybe<String>;
  workStreet_lte?: Maybe<String>;
  workStreet_gt?: Maybe<String>;
  workStreet_gte?: Maybe<String>;
  workStreet_contains?: Maybe<String>;
  workStreet_not_contains?: Maybe<String>;
  workStreet_starts_with?: Maybe<String>;
  workStreet_not_starts_with?: Maybe<String>;
  workStreet_ends_with?: Maybe<String>;
  workStreet_not_ends_with?: Maybe<String>;
  workStreet2?: Maybe<String>;
  workStreet2_not?: Maybe<String>;
  workStreet2_in?: Maybe<String[] | String>;
  workStreet2_not_in?: Maybe<String[] | String>;
  workStreet2_lt?: Maybe<String>;
  workStreet2_lte?: Maybe<String>;
  workStreet2_gt?: Maybe<String>;
  workStreet2_gte?: Maybe<String>;
  workStreet2_contains?: Maybe<String>;
  workStreet2_not_contains?: Maybe<String>;
  workStreet2_starts_with?: Maybe<String>;
  workStreet2_not_starts_with?: Maybe<String>;
  workStreet2_ends_with?: Maybe<String>;
  workStreet2_not_ends_with?: Maybe<String>;
  emailMain?: Maybe<String>;
  emailMain_not?: Maybe<String>;
  emailMain_in?: Maybe<String[] | String>;
  emailMain_not_in?: Maybe<String[] | String>;
  emailMain_lt?: Maybe<String>;
  emailMain_lte?: Maybe<String>;
  emailMain_gt?: Maybe<String>;
  emailMain_gte?: Maybe<String>;
  emailMain_contains?: Maybe<String>;
  emailMain_not_contains?: Maybe<String>;
  emailMain_starts_with?: Maybe<String>;
  emailMain_not_starts_with?: Maybe<String>;
  emailMain_ends_with?: Maybe<String>;
  emailMain_not_ends_with?: Maybe<String>;
  emailBackup?: Maybe<String>;
  emailBackup_not?: Maybe<String>;
  emailBackup_in?: Maybe<String[] | String>;
  emailBackup_not_in?: Maybe<String[] | String>;
  emailBackup_lt?: Maybe<String>;
  emailBackup_lte?: Maybe<String>;
  emailBackup_gt?: Maybe<String>;
  emailBackup_gte?: Maybe<String>;
  emailBackup_contains?: Maybe<String>;
  emailBackup_not_contains?: Maybe<String>;
  emailBackup_starts_with?: Maybe<String>;
  emailBackup_not_starts_with?: Maybe<String>;
  emailBackup_ends_with?: Maybe<String>;
  emailBackup_not_ends_with?: Maybe<String>;
  socialSecurity?: Maybe<Float>;
  socialSecurity_not?: Maybe<Float>;
  socialSecurity_in?: Maybe<Float[] | Float>;
  socialSecurity_not_in?: Maybe<Float[] | Float>;
  socialSecurity_lt?: Maybe<Float>;
  socialSecurity_lte?: Maybe<Float>;
  socialSecurity_gt?: Maybe<Float>;
  socialSecurity_gte?: Maybe<Float>;
  cellPhone?: Maybe<Float>;
  cellPhone_not?: Maybe<Float>;
  cellPhone_in?: Maybe<Float[] | Float>;
  cellPhone_not_in?: Maybe<Float[] | Float>;
  cellPhone_lt?: Maybe<Float>;
  cellPhone_lte?: Maybe<Float>;
  cellPhone_gt?: Maybe<Float>;
  cellPhone_gte?: Maybe<Float>;
  workPhone?: Maybe<Float>;
  workPhone_not?: Maybe<Float>;
  workPhone_in?: Maybe<Float[] | Float>;
  workPhone_not_in?: Maybe<Float[] | Float>;
  workPhone_lt?: Maybe<Float>;
  workPhone_lte?: Maybe<Float>;
  workPhone_gt?: Maybe<Float>;
  workPhone_gte?: Maybe<Float>;
  homePhone?: Maybe<Float>;
  homePhone_not?: Maybe<Float>;
  homePhone_in?: Maybe<Float[] | Float>;
  homePhone_not_in?: Maybe<Float[] | Float>;
  homePhone_lt?: Maybe<Float>;
  homePhone_lte?: Maybe<Float>;
  homePhone_gt?: Maybe<Float>;
  homePhone_gte?: Maybe<Float>;
  fax?: Maybe<Float>;
  fax_not?: Maybe<Float>;
  fax_in?: Maybe<Float[] | Float>;
  fax_not_in?: Maybe<Float[] | Float>;
  fax_lt?: Maybe<Float>;
  fax_lte?: Maybe<Float>;
  fax_gt?: Maybe<Float>;
  fax_gte?: Maybe<Float>;
  contactComment?: Maybe<String>;
  contactComment_not?: Maybe<String>;
  contactComment_in?: Maybe<String[] | String>;
  contactComment_not_in?: Maybe<String[] | String>;
  contactComment_lt?: Maybe<String>;
  contactComment_lte?: Maybe<String>;
  contactComment_gt?: Maybe<String>;
  contactComment_gte?: Maybe<String>;
  contactComment_contains?: Maybe<String>;
  contactComment_not_contains?: Maybe<String>;
  contactComment_starts_with?: Maybe<String>;
  contactComment_not_starts_with?: Maybe<String>;
  contactComment_ends_with?: Maybe<String>;
  contactComment_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContactScalarWhereInput[] | ContactScalarWhereInput>;
  OR?: Maybe<ContactScalarWhereInput[] | ContactScalarWhereInput>;
  NOT?: Maybe<ContactScalarWhereInput[] | ContactScalarWhereInput>;
}

export interface NoteCreateInput {
  id?: Maybe<ID_Input>;
  case?: Maybe<CaseCreateOneWithoutCaseNotesInput>;
  title: String;
  content?: Maybe<String>;
  author?: Maybe<UserCreateOneInput>;
  type?: Maybe<String>;
}

export interface ContactUpdateManyWithWhereNestedInput {
  where: ContactScalarWhereInput;
  data: ContactUpdateManyDataInput;
}

export interface ContactUpdateManyMutationInput {
  contactType?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeStreet?: Maybe<String>;
  homeStreet2?: Maybe<String>;
  homeCity?: Maybe<String>;
  homeState?: Maybe<String>;
  homeZip?: Maybe<String>;
  workStreet?: Maybe<String>;
  workStreet2?: Maybe<String>;
  emailMain?: Maybe<String>;
  emailBackup?: Maybe<String>;
  socialSecurity?: Maybe<Float>;
  cellPhone?: Maybe<Float>;
  workPhone?: Maybe<Float>;
  homePhone?: Maybe<Float>;
  fax?: Maybe<Float>;
  contactComment?: Maybe<String>;
}

export interface ContactUpdateManyDataInput {
  contactType?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeStreet?: Maybe<String>;
  homeStreet2?: Maybe<String>;
  homeCity?: Maybe<String>;
  homeState?: Maybe<String>;
  homeZip?: Maybe<String>;
  workStreet?: Maybe<String>;
  workStreet2?: Maybe<String>;
  emailMain?: Maybe<String>;
  emailBackup?: Maybe<String>;
  socialSecurity?: Maybe<Float>;
  cellPhone?: Maybe<Float>;
  workPhone?: Maybe<Float>;
  homePhone?: Maybe<Float>;
  fax?: Maybe<Float>;
  contactComment?: Maybe<String>;
}

export interface NoteUpdateManyDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  type?: Maybe<String>;
}

export interface ContactUpdateOneInput {
  create?: Maybe<ContactCreateInput>;
  update?: Maybe<ContactUpdateDataInput>;
  upsert?: Maybe<ContactUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ContactWhereUniqueInput>;
}

export interface CaseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  caseId?: Maybe<String>;
  caseId_not?: Maybe<String>;
  caseId_in?: Maybe<String[] | String>;
  caseId_not_in?: Maybe<String[] | String>;
  caseId_lt?: Maybe<String>;
  caseId_lte?: Maybe<String>;
  caseId_gt?: Maybe<String>;
  caseId_gte?: Maybe<String>;
  caseId_contains?: Maybe<String>;
  caseId_not_contains?: Maybe<String>;
  caseId_starts_with?: Maybe<String>;
  caseId_not_starts_with?: Maybe<String>;
  caseId_ends_with?: Maybe<String>;
  caseId_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  referralType?: Maybe<String>;
  referralType_not?: Maybe<String>;
  referralType_in?: Maybe<String[] | String>;
  referralType_not_in?: Maybe<String[] | String>;
  referralType_lt?: Maybe<String>;
  referralType_lte?: Maybe<String>;
  referralType_gt?: Maybe<String>;
  referralType_gte?: Maybe<String>;
  referralType_contains?: Maybe<String>;
  referralType_not_contains?: Maybe<String>;
  referralType_starts_with?: Maybe<String>;
  referralType_not_starts_with?: Maybe<String>;
  referralType_ends_with?: Maybe<String>;
  referralType_not_ends_with?: Maybe<String>;
  legalPlan?: Maybe<String>;
  legalPlan_not?: Maybe<String>;
  legalPlan_in?: Maybe<String[] | String>;
  legalPlan_not_in?: Maybe<String[] | String>;
  legalPlan_lt?: Maybe<String>;
  legalPlan_lte?: Maybe<String>;
  legalPlan_gt?: Maybe<String>;
  legalPlan_gte?: Maybe<String>;
  legalPlan_contains?: Maybe<String>;
  legalPlan_not_contains?: Maybe<String>;
  legalPlan_starts_with?: Maybe<String>;
  legalPlan_not_starts_with?: Maybe<String>;
  legalPlan_ends_with?: Maybe<String>;
  legalPlan_not_ends_with?: Maybe<String>;
  importantDates_every?: Maybe<ImportantDateWhereInput>;
  importantDates_some?: Maybe<ImportantDateWhereInput>;
  importantDates_none?: Maybe<ImportantDateWhereInput>;
  caseNumberDetails?: Maybe<String>;
  caseNumberDetails_not?: Maybe<String>;
  caseNumberDetails_in?: Maybe<String[] | String>;
  caseNumberDetails_not_in?: Maybe<String[] | String>;
  caseNumberDetails_lt?: Maybe<String>;
  caseNumberDetails_lte?: Maybe<String>;
  caseNumberDetails_gt?: Maybe<String>;
  caseNumberDetails_gte?: Maybe<String>;
  caseNumberDetails_contains?: Maybe<String>;
  caseNumberDetails_not_contains?: Maybe<String>;
  caseNumberDetails_starts_with?: Maybe<String>;
  caseNumberDetails_not_starts_with?: Maybe<String>;
  caseNumberDetails_ends_with?: Maybe<String>;
  caseNumberDetails_not_ends_with?: Maybe<String>;
  generalCaseDetails?: Maybe<String>;
  generalCaseDetails_not?: Maybe<String>;
  generalCaseDetails_in?: Maybe<String[] | String>;
  generalCaseDetails_not_in?: Maybe<String[] | String>;
  generalCaseDetails_lt?: Maybe<String>;
  generalCaseDetails_lte?: Maybe<String>;
  generalCaseDetails_gt?: Maybe<String>;
  generalCaseDetails_gte?: Maybe<String>;
  generalCaseDetails_contains?: Maybe<String>;
  generalCaseDetails_not_contains?: Maybe<String>;
  generalCaseDetails_starts_with?: Maybe<String>;
  generalCaseDetails_not_starts_with?: Maybe<String>;
  generalCaseDetails_ends_with?: Maybe<String>;
  generalCaseDetails_not_ends_with?: Maybe<String>;
  caseContacts_every?: Maybe<ContactWhereInput>;
  caseContacts_some?: Maybe<ContactWhereInput>;
  caseContacts_none?: Maybe<ContactWhereInput>;
  client?: Maybe<ContactWhereInput>;
  staffAttorneys_every?: Maybe<ContactWhereInput>;
  staffAttorneys_some?: Maybe<ContactWhereInput>;
  staffAttorneys_none?: Maybe<ContactWhereInput>;
  staffAssistants_every?: Maybe<ContactWhereInput>;
  staffAssistants_some?: Maybe<ContactWhereInput>;
  staffAssistants_none?: Maybe<ContactWhereInput>;
  opposingPartys_every?: Maybe<ContactWhereInput>;
  opposingPartys_some?: Maybe<ContactWhereInput>;
  opposingPartys_none?: Maybe<ContactWhereInput>;
  opposingAttorneys_every?: Maybe<ContactWhereInput>;
  opposingAttorneys_some?: Maybe<ContactWhereInput>;
  opposingAttorneys_none?: Maybe<ContactWhereInput>;
  referringPartys_every?: Maybe<ContactWhereInput>;
  referringPartys_some?: Maybe<ContactWhereInput>;
  referringPartys_none?: Maybe<ContactWhereInput>;
  associatedContacts_every?: Maybe<ContactWhereInput>;
  associatedContacts_some?: Maybe<ContactWhereInput>;
  associatedContacts_none?: Maybe<ContactWhereInput>;
  caseNotes_every?: Maybe<NoteWhereInput>;
  caseNotes_some?: Maybe<NoteWhereInput>;
  caseNotes_none?: Maybe<NoteWhereInput>;
  AND?: Maybe<CaseWhereInput[] | CaseWhereInput>;
  OR?: Maybe<CaseWhereInput[] | CaseWhereInput>;
  NOT?: Maybe<CaseWhereInput[] | CaseWhereInput>;
}

export interface ContactUpsertNestedInput {
  update: ContactUpdateDataInput;
  create: ContactCreateInput;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  userName?: Maybe<String>;
  role?: Maybe<String>;
  contact?: Maybe<ContactUpdateOneInput>;
}

export interface CaseCreateWithoutCaseNotesInput {
  id?: Maybe<ID_Input>;
  caseId: String;
  title?: Maybe<String>;
  status?: Maybe<String>;
  referralType?: Maybe<String>;
  legalPlan?: Maybe<String>;
  importantDates?: Maybe<ImportantDateCreateManyInput>;
  caseNumberDetails?: Maybe<String>;
  generalCaseDetails?: Maybe<String>;
  caseContacts?: Maybe<ContactCreateManyInput>;
  client?: Maybe<ContactCreateOneInput>;
  staffAttorneys?: Maybe<ContactCreateManyInput>;
  staffAssistants?: Maybe<ContactCreateManyInput>;
  opposingPartys?: Maybe<ContactCreateManyInput>;
  opposingAttorneys?: Maybe<ContactCreateManyInput>;
  referringPartys?: Maybe<ContactCreateManyInput>;
  associatedContacts?: Maybe<ContactCreateManyInput>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NoteUpdateWithoutCaseDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  author?: Maybe<UserUpdateOneInput>;
  type?: Maybe<String>;
}

export interface NoteUpdateWithWhereUniqueWithoutCaseInput {
  where: NoteWhereUniqueInput;
  data: NoteUpdateWithoutCaseDataInput;
}

export interface NoteUpdateManyWithoutCaseInput {
  create?: Maybe<NoteCreateWithoutCaseInput[] | NoteCreateWithoutCaseInput>;
  delete?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  set?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  disconnect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  update?: Maybe<
    | NoteUpdateWithWhereUniqueWithoutCaseInput[]
    | NoteUpdateWithWhereUniqueWithoutCaseInput
  >;
  upsert?: Maybe<
    | NoteUpsertWithWhereUniqueWithoutCaseInput[]
    | NoteUpsertWithWhereUniqueWithoutCaseInput
  >;
  deleteMany?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  updateMany?: Maybe<
    NoteUpdateManyWithWhereNestedInput[] | NoteUpdateManyWithWhereNestedInput
  >;
}

export interface ImportantDateUpdateManyMutationInput {
  importantDateType?: Maybe<String>;
  ImportantDateDetails?: Maybe<String>;
}

export interface CaseUpdateWithoutCaseNotesDataInput {
  caseId?: Maybe<String>;
  title?: Maybe<String>;
  status?: Maybe<String>;
  referralType?: Maybe<String>;
  legalPlan?: Maybe<String>;
  importantDates?: Maybe<ImportantDateUpdateManyInput>;
  caseNumberDetails?: Maybe<String>;
  generalCaseDetails?: Maybe<String>;
  caseContacts?: Maybe<ContactUpdateManyInput>;
  client?: Maybe<ContactUpdateOneInput>;
  staffAttorneys?: Maybe<ContactUpdateManyInput>;
  staffAssistants?: Maybe<ContactUpdateManyInput>;
  opposingPartys?: Maybe<ContactUpdateManyInput>;
  opposingAttorneys?: Maybe<ContactUpdateManyInput>;
  referringPartys?: Maybe<ContactUpdateManyInput>;
  associatedContacts?: Maybe<ContactUpdateManyInput>;
}

export interface ContactSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContactWhereInput>;
  AND?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
  OR?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
  NOT?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
}

export interface ContactUpdateInput {
  contactType?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeStreet?: Maybe<String>;
  homeStreet2?: Maybe<String>;
  homeCity?: Maybe<String>;
  homeState?: Maybe<String>;
  homeZip?: Maybe<String>;
  workStreet?: Maybe<String>;
  workStreet2?: Maybe<String>;
  emailMain?: Maybe<String>;
  emailBackup?: Maybe<String>;
  socialSecurity?: Maybe<Float>;
  cellPhone?: Maybe<Float>;
  workPhone?: Maybe<Float>;
  homePhone?: Maybe<Float>;
  fax?: Maybe<Float>;
  contactComment?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  userName: String;
  role?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  userName: () => Promise<String>;
  role: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
}

export interface CaseEdge {
  node: Case;
  cursor: String;
}

export interface CaseEdgePromise extends Promise<CaseEdge>, Fragmentable {
  node: <T = CasePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CaseEdgeSubscription
  extends Promise<AsyncIterator<CaseEdge>>,
    Fragmentable {
  node: <T = CaseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ImportantDate {
  id: ID_Output;
  importantDateType?: String;
  ImportantDateDetails?: String;
}

export interface ImportantDatePromise
  extends Promise<ImportantDate>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  importantDateType: () => Promise<String>;
  ImportantDateDetails: () => Promise<String>;
}

export interface ImportantDateSubscription
  extends Promise<AsyncIterator<ImportantDate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  importantDateType: () => Promise<AsyncIterator<String>>;
  ImportantDateDetails: () => Promise<AsyncIterator<String>>;
}

export interface ImportantDateNullablePromise
  extends Promise<ImportantDate | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  importantDateType: () => Promise<String>;
  ImportantDateDetails: () => Promise<String>;
}

export interface ContactConnection {
  pageInfo: PageInfo;
  edges: ContactEdge[];
}

export interface ContactConnectionPromise
  extends Promise<ContactConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContactEdge>>() => T;
  aggregate: <T = AggregateContactPromise>() => T;
}

export interface ContactConnectionSubscription
  extends Promise<AsyncIterator<ContactConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContactEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContactSubscription>() => T;
}

export interface ImportantDatePreviousValues {
  id: ID_Output;
  importantDateType?: String;
  ImportantDateDetails?: String;
}

export interface ImportantDatePreviousValuesPromise
  extends Promise<ImportantDatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  importantDateType: () => Promise<String>;
  ImportantDateDetails: () => Promise<String>;
}

export interface ImportantDatePreviousValuesSubscription
  extends Promise<AsyncIterator<ImportantDatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  importantDateType: () => Promise<AsyncIterator<String>>;
  ImportantDateDetails: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCase {
  count: Int;
}

export interface AggregateCasePromise
  extends Promise<AggregateCase>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCaseSubscription
  extends Promise<AsyncIterator<AggregateCase>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Contact {
  id: ID_Output;
  contactType?: String;
  firstName: String;
  lastName: String;
  homeStreet?: String;
  homeStreet2?: String;
  homeCity?: String;
  homeState?: String;
  homeZip?: String;
  workStreet?: String;
  workStreet2?: String;
  emailMain?: String;
  emailBackup?: String;
  socialSecurity?: Float;
  cellPhone?: Float;
  workPhone?: Float;
  homePhone?: Float;
  fax?: Float;
  contactComment?: String;
}

export interface ContactPromise extends Promise<Contact>, Fragmentable {
  id: () => Promise<ID_Output>;
  contactType: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  homeStreet: () => Promise<String>;
  homeStreet2: () => Promise<String>;
  homeCity: () => Promise<String>;
  homeState: () => Promise<String>;
  homeZip: () => Promise<String>;
  workStreet: () => Promise<String>;
  workStreet2: () => Promise<String>;
  emailMain: () => Promise<String>;
  emailBackup: () => Promise<String>;
  socialSecurity: () => Promise<Float>;
  cellPhone: () => Promise<Float>;
  workPhone: () => Promise<Float>;
  homePhone: () => Promise<Float>;
  fax: () => Promise<Float>;
  contactComment: () => Promise<String>;
}

export interface ContactSubscription
  extends Promise<AsyncIterator<Contact>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  contactType: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  homeStreet: () => Promise<AsyncIterator<String>>;
  homeStreet2: () => Promise<AsyncIterator<String>>;
  homeCity: () => Promise<AsyncIterator<String>>;
  homeState: () => Promise<AsyncIterator<String>>;
  homeZip: () => Promise<AsyncIterator<String>>;
  workStreet: () => Promise<AsyncIterator<String>>;
  workStreet2: () => Promise<AsyncIterator<String>>;
  emailMain: () => Promise<AsyncIterator<String>>;
  emailBackup: () => Promise<AsyncIterator<String>>;
  socialSecurity: () => Promise<AsyncIterator<Float>>;
  cellPhone: () => Promise<AsyncIterator<Float>>;
  workPhone: () => Promise<AsyncIterator<Float>>;
  homePhone: () => Promise<AsyncIterator<Float>>;
  fax: () => Promise<AsyncIterator<Float>>;
  contactComment: () => Promise<AsyncIterator<String>>;
}

export interface ContactNullablePromise
  extends Promise<Contact | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  contactType: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  homeStreet: () => Promise<String>;
  homeStreet2: () => Promise<String>;
  homeCity: () => Promise<String>;
  homeState: () => Promise<String>;
  homeZip: () => Promise<String>;
  workStreet: () => Promise<String>;
  workStreet2: () => Promise<String>;
  emailMain: () => Promise<String>;
  emailBackup: () => Promise<String>;
  socialSecurity: () => Promise<Float>;
  cellPhone: () => Promise<Float>;
  workPhone: () => Promise<Float>;
  homePhone: () => Promise<Float>;
  fax: () => Promise<Float>;
  contactComment: () => Promise<String>;
}

export interface NotePreviousValues {
  id: ID_Output;
  dateCreated: DateTimeOutput;
  title: String;
  content?: String;
  type?: String;
}

export interface NotePreviousValuesPromise
  extends Promise<NotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  type: () => Promise<String>;
}

export interface NotePreviousValuesSubscription
  extends Promise<AsyncIterator<NotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNote {
  count: Int;
}

export interface AggregateNotePromise
  extends Promise<AggregateNote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoteSubscription
  extends Promise<AsyncIterator<AggregateNote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CaseConnection {
  pageInfo: PageInfo;
  edges: CaseEdge[];
}

export interface CaseConnectionPromise
  extends Promise<CaseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CaseEdge>>() => T;
  aggregate: <T = AggregateCasePromise>() => T;
}

export interface CaseConnectionSubscription
  extends Promise<AsyncIterator<CaseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CaseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCaseSubscription>() => T;
}

export interface NoteConnection {
  pageInfo: PageInfo;
  edges: NoteEdge[];
}

export interface NoteConnectionPromise
  extends Promise<NoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoteEdge>>() => T;
  aggregate: <T = AggregateNotePromise>() => T;
}

export interface NoteConnectionSubscription
  extends Promise<AsyncIterator<NoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoteSubscription>() => T;
}

export interface NoteSubscriptionPayload {
  mutation: MutationType;
  node: Note;
  updatedFields: String[];
  previousValues: NotePreviousValues;
}

export interface NoteSubscriptionPayloadPromise
  extends Promise<NoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotePreviousValuesPromise>() => T;
}

export interface NoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotePreviousValuesSubscription>() => T;
}

export interface ImportantDateEdge {
  node: ImportantDate;
  cursor: String;
}

export interface ImportantDateEdgePromise
  extends Promise<ImportantDateEdge>,
    Fragmentable {
  node: <T = ImportantDatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImportantDateEdgeSubscription
  extends Promise<AsyncIterator<ImportantDateEdge>>,
    Fragmentable {
  node: <T = ImportantDateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CaseSubscriptionPayload {
  mutation: MutationType;
  node: Case;
  updatedFields: String[];
  previousValues: CasePreviousValues;
}

export interface CaseSubscriptionPayloadPromise
  extends Promise<CaseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CasePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CasePreviousValuesPromise>() => T;
}

export interface CaseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CaseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CaseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CasePreviousValuesSubscription>() => T;
}

export interface AggregateContact {
  count: Int;
}

export interface AggregateContactPromise
  extends Promise<AggregateContact>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContactSubscription
  extends Promise<AsyncIterator<AggregateContact>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CasePreviousValues {
  id: ID_Output;
  caseId: String;
  title?: String;
  status?: String;
  referralType?: String;
  legalPlan?: String;
  caseNumberDetails?: String;
  generalCaseDetails?: String;
}

export interface CasePreviousValuesPromise
  extends Promise<CasePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  caseId: () => Promise<String>;
  title: () => Promise<String>;
  status: () => Promise<String>;
  referralType: () => Promise<String>;
  legalPlan: () => Promise<String>;
  caseNumberDetails: () => Promise<String>;
  generalCaseDetails: () => Promise<String>;
}

export interface CasePreviousValuesSubscription
  extends Promise<AsyncIterator<CasePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  caseId: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  referralType: () => Promise<AsyncIterator<String>>;
  legalPlan: () => Promise<AsyncIterator<String>>;
  caseNumberDetails: () => Promise<AsyncIterator<String>>;
  generalCaseDetails: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email?: String;
  userName: String;
  role?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  userName: () => Promise<String>;
  role: () => Promise<String>;
  contact: <T = ContactPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  contact: <T = ContactSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  userName: () => Promise<String>;
  role: () => Promise<String>;
  contact: <T = ContactPromise>() => T;
}

export interface Case {
  id: ID_Output;
  caseId: String;
  title?: String;
  status?: String;
  referralType?: String;
  legalPlan?: String;
  caseNumberDetails?: String;
  generalCaseDetails?: String;
}

export interface CasePromise extends Promise<Case>, Fragmentable {
  id: () => Promise<ID_Output>;
  caseId: () => Promise<String>;
  title: () => Promise<String>;
  status: () => Promise<String>;
  referralType: () => Promise<String>;
  legalPlan: () => Promise<String>;
  importantDates: <T = FragmentableArray<ImportantDate>>(args?: {
    where?: ImportantDateWhereInput;
    orderBy?: ImportantDateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  caseNumberDetails: () => Promise<String>;
  generalCaseDetails: () => Promise<String>;
  caseContacts: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  client: <T = ContactPromise>() => T;
  staffAttorneys: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  staffAssistants: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  opposingPartys: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  opposingAttorneys: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  referringPartys: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  associatedContacts: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  caseNotes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CaseSubscription
  extends Promise<AsyncIterator<Case>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  caseId: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  referralType: () => Promise<AsyncIterator<String>>;
  legalPlan: () => Promise<AsyncIterator<String>>;
  importantDates: <
    T = Promise<AsyncIterator<ImportantDateSubscription>>
  >(args?: {
    where?: ImportantDateWhereInput;
    orderBy?: ImportantDateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  caseNumberDetails: () => Promise<AsyncIterator<String>>;
  generalCaseDetails: () => Promise<AsyncIterator<String>>;
  caseContacts: <T = Promise<AsyncIterator<ContactSubscription>>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  client: <T = ContactSubscription>() => T;
  staffAttorneys: <T = Promise<AsyncIterator<ContactSubscription>>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  staffAssistants: <T = Promise<AsyncIterator<ContactSubscription>>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  opposingPartys: <T = Promise<AsyncIterator<ContactSubscription>>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  opposingAttorneys: <T = Promise<AsyncIterator<ContactSubscription>>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  referringPartys: <T = Promise<AsyncIterator<ContactSubscription>>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  associatedContacts: <T = Promise<AsyncIterator<ContactSubscription>>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  caseNotes: <T = Promise<AsyncIterator<NoteSubscription>>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CaseNullablePromise
  extends Promise<Case | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  caseId: () => Promise<String>;
  title: () => Promise<String>;
  status: () => Promise<String>;
  referralType: () => Promise<String>;
  legalPlan: () => Promise<String>;
  importantDates: <T = FragmentableArray<ImportantDate>>(args?: {
    where?: ImportantDateWhereInput;
    orderBy?: ImportantDateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  caseNumberDetails: () => Promise<String>;
  generalCaseDetails: () => Promise<String>;
  caseContacts: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  client: <T = ContactPromise>() => T;
  staffAttorneys: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  staffAssistants: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  opposingPartys: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  opposingAttorneys: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  referringPartys: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  associatedContacts: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  caseNotes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateImportantDate {
  count: Int;
}

export interface AggregateImportantDatePromise
  extends Promise<AggregateImportantDate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImportantDateSubscription
  extends Promise<AsyncIterator<AggregateImportantDate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ImportantDateSubscriptionPayload {
  mutation: MutationType;
  node: ImportantDate;
  updatedFields: String[];
  previousValues: ImportantDatePreviousValues;
}

export interface ImportantDateSubscriptionPayloadPromise
  extends Promise<ImportantDateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImportantDatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImportantDatePreviousValuesPromise>() => T;
}

export interface ImportantDateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImportantDateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImportantDateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImportantDatePreviousValuesSubscription>() => T;
}

export interface Note {
  id: ID_Output;
  dateCreated: DateTimeOutput;
  title: String;
  content?: String;
  type?: String;
}

export interface NotePromise extends Promise<Note>, Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  case: <T = CasePromise>() => T;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
  type: () => Promise<String>;
}

export interface NoteSubscription
  extends Promise<AsyncIterator<Note>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  case: <T = CaseSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<String>>;
}

export interface NoteNullablePromise
  extends Promise<Note | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  case: <T = CasePromise>() => T;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
  type: () => Promise<String>;
}

export interface ContactPreviousValues {
  id: ID_Output;
  contactType?: String;
  firstName: String;
  lastName: String;
  homeStreet?: String;
  homeStreet2?: String;
  homeCity?: String;
  homeState?: String;
  homeZip?: String;
  workStreet?: String;
  workStreet2?: String;
  emailMain?: String;
  emailBackup?: String;
  socialSecurity?: Float;
  cellPhone?: Float;
  workPhone?: Float;
  homePhone?: Float;
  fax?: Float;
  contactComment?: String;
}

export interface ContactPreviousValuesPromise
  extends Promise<ContactPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  contactType: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  homeStreet: () => Promise<String>;
  homeStreet2: () => Promise<String>;
  homeCity: () => Promise<String>;
  homeState: () => Promise<String>;
  homeZip: () => Promise<String>;
  workStreet: () => Promise<String>;
  workStreet2: () => Promise<String>;
  emailMain: () => Promise<String>;
  emailBackup: () => Promise<String>;
  socialSecurity: () => Promise<Float>;
  cellPhone: () => Promise<Float>;
  workPhone: () => Promise<Float>;
  homePhone: () => Promise<Float>;
  fax: () => Promise<Float>;
  contactComment: () => Promise<String>;
}

export interface ContactPreviousValuesSubscription
  extends Promise<AsyncIterator<ContactPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  contactType: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  homeStreet: () => Promise<AsyncIterator<String>>;
  homeStreet2: () => Promise<AsyncIterator<String>>;
  homeCity: () => Promise<AsyncIterator<String>>;
  homeState: () => Promise<AsyncIterator<String>>;
  homeZip: () => Promise<AsyncIterator<String>>;
  workStreet: () => Promise<AsyncIterator<String>>;
  workStreet2: () => Promise<AsyncIterator<String>>;
  emailMain: () => Promise<AsyncIterator<String>>;
  emailBackup: () => Promise<AsyncIterator<String>>;
  socialSecurity: () => Promise<AsyncIterator<Float>>;
  cellPhone: () => Promise<AsyncIterator<Float>>;
  workPhone: () => Promise<AsyncIterator<Float>>;
  homePhone: () => Promise<AsyncIterator<Float>>;
  fax: () => Promise<AsyncIterator<Float>>;
  contactComment: () => Promise<AsyncIterator<String>>;
}

export interface ContactSubscriptionPayload {
  mutation: MutationType;
  node: Contact;
  updatedFields: String[];
  previousValues: ContactPreviousValues;
}

export interface ContactSubscriptionPayloadPromise
  extends Promise<ContactSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContactPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContactPreviousValuesPromise>() => T;
}

export interface ContactSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContactSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContactSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContactPreviousValuesSubscription>() => T;
}

export interface ImportantDateConnection {
  pageInfo: PageInfo;
  edges: ImportantDateEdge[];
}

export interface ImportantDateConnectionPromise
  extends Promise<ImportantDateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImportantDateEdge>>() => T;
  aggregate: <T = AggregateImportantDatePromise>() => T;
}

export interface ImportantDateConnectionSubscription
  extends Promise<AsyncIterator<ImportantDateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImportantDateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImportantDateSubscription>() => T;
}

export interface NoteEdge {
  node: Note;
  cursor: String;
}

export interface NoteEdgePromise extends Promise<NoteEdge>, Fragmentable {
  node: <T = NotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoteEdgeSubscription
  extends Promise<AsyncIterator<NoteEdge>>,
    Fragmentable {
  node: <T = NoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ContactEdge {
  node: Contact;
  cursor: String;
}

export interface ContactEdgePromise extends Promise<ContactEdge>, Fragmentable {
  node: <T = ContactPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContactEdgeSubscription
  extends Promise<AsyncIterator<ContactEdge>>,
    Fragmentable {
  node: <T = ContactSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Case",
    embedded: false
  },
  {
    name: "Contact",
    embedded: false
  },
  {
    name: "Note",
    embedded: false
  },
  {
    name: "ImportantDate",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
